{"file_contents":{"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"replit.md":{"content":"# AI Cohost for Twitter/X Spaces\n\n## Overview\n\nThis is a real-time voice-enabled AI agent that acts as a charismatic cohost for Twitter/X Spaces. The application captures live audio, processes it through speech-to-text, generates intelligent AI responses, and synthesizes speech back to the conversation. The system is designed to keep conversations flowing with humor, insight, and human-like interaction while maintaining extremely low latency (under 2 seconds for first response).\n\n## User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n## System Architecture\n\n### Frontend Architecture\n\nThe client is built using **React 18** with **TypeScript** and **Vite** as the build tool. The UI leverages **shadcn/ui** components built on **Radix UI** primitives with **Tailwind CSS** for styling. The application uses a modern single-page architecture with **Wouter** for lightweight routing.\n\n**State Management**: React Query (TanStack Query) handles server state and caching, while local component state manages UI interactions. WebSocket connections provide real-time communication between client and server.\n\n**Audio Processing**: The frontend captures live audio through the Web Audio API with echo cancellation, noise suppression, and automatic gain control. Audio levels are monitored in real-time for visualization and voice activity detection.\n\n### Backend Architecture\n\nThe server is built with **Express.js** and **TypeScript**, following a RESTful API pattern with WebSocket support for real-time features. The architecture separates concerns into distinct service layers:\n\n**Audio Service**: Handles audio chunk processing, level calculation, and buffering with configurable sample rates and chunk sizes.\n\n**OpenAI Service**: Integrates with OpenAI's APIs for speech-to-text (Whisper), text generation (GPT), and text-to-speech synthesis. Includes conversation context management and personality-driven response generation.\n\n**Storage Layer**: Implements an in-memory storage system with interfaces designed for easy migration to persistent databases. Stores sessions, speakers, messages, AI personality configurations, and analytics data.\n\n### Real-time Communication\n\n**WebSocket Integration**: Bidirectional communication for live audio streaming, AI status updates, and message broadcasting. Supports session management with host/guest roles and automatic reconnection handling.\n\n**Audio Pipeline**: Captures audio through virtual audio cables or loopback systems, processes through STT with partial streaming, generates contextual responses, and synthesizes speech with prosody control.\n\n### Data Models\n\nThe schema defines core entities including sessions (live/waiting/ended states), speakers (host/guest/AI roles), messages with confidence scores, session memory for context retention, AI personality configurations, and analytics tracking.\n\n**Memory Management**: Implements both session-scoped and long-term memory with configurable retention policies, confidence-based filtering, and automatic summarization after sessions.\n\n### AI Personality System\n\n**Dynamic Personalities**: Supports multiple voice types (energetic podcaster, street comedy, UFO researcher) with adjustable parameters for comedy level, research depth, and energy. Includes real-time voice swapping with preview capabilities.\n\n**Response Strategies**: Implements various interaction patterns including turn-taking with interruption handling, contextual joke insertion, smooth topic transitions, and escalation to human hosts when needed.\n\n## External Dependencies\n\n### AI Services\n- **OpenAI API**: Core service for Whisper speech-to-text, GPT-4/5 text generation, and TTS synthesis\n- **Neon Database**: PostgreSQL database service for production data persistence\n- **Drizzle ORM**: Type-safe database operations with PostgreSQL dialect\n\n### Development Tools\n- **Vite**: Frontend build tool with hot module replacement and optimization\n- **TypeScript**: Type safety across the entire application stack\n- **ESBuild**: Fast bundling for production server builds\n\n### UI and Styling\n- **Tailwind CSS**: Utility-first CSS framework with custom design tokens\n- **Radix UI**: Accessible component primitives for complex UI interactions\n- **Lucide React**: Comprehensive icon library for user interface elements\n\n### Audio Processing\n- **Web Audio API**: Browser-native audio capture and processing capabilities\n- **Virtual Audio Cables**: External audio routing for live space integration\n\n### Real-time Features\n- **WebSocket**: Native browser/Node.js WebSocket implementation for live communication\n- **React Query**: Efficient server state management with caching and synchronization\n\n### Session Management\n- **connect-pg-simple**: PostgreSQL session store for user authentication and persistence\n- **Express Session**: Server-side session management with secure cookie handling","size_bytes":4892},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"var(--background)\",\n        foreground: \"var(--foreground)\",\n        card: {\n          DEFAULT: \"var(--card)\",\n          foreground: \"var(--card-foreground)\",\n        },\n        popover: {\n          DEFAULT: \"var(--popover)\",\n          foreground: \"var(--popover-foreground)\",\n        },\n        primary: {\n          DEFAULT: \"var(--primary)\",\n          foreground: \"var(--primary-foreground)\",\n        },\n        secondary: {\n          DEFAULT: \"var(--secondary)\",\n          foreground: \"var(--secondary-foreground)\",\n        },\n        muted: {\n          DEFAULT: \"var(--muted)\",\n          foreground: \"var(--muted-foreground)\",\n        },\n        accent: {\n          DEFAULT: \"var(--accent)\",\n          foreground: \"var(--accent-foreground)\",\n        },\n        destructive: {\n          DEFAULT: \"var(--destructive)\",\n          foreground: \"var(--destructive-foreground)\",\n        },\n        border: \"var(--border)\",\n        input: \"var(--input)\",\n        ring: \"var(--ring)\",\n        chart: {\n          \"1\": \"var(--chart-1)\",\n          \"2\": \"var(--chart-2)\",\n          \"3\": \"var(--chart-3)\",\n          \"4\": \"var(--chart-4)\",\n          \"5\": \"var(--chart-5)\",\n        },\n        sidebar: {\n          DEFAULT: \"var(--sidebar-background)\",\n          foreground: \"var(--sidebar-foreground)\",\n          primary: \"var(--sidebar-primary)\",\n          \"primary-foreground\": \"var(--sidebar-primary-foreground)\",\n          accent: \"var(--sidebar-accent)\",\n          \"accent-foreground\": \"var(--sidebar-accent-foreground)\",\n          border: \"var(--sidebar-border)\",\n          ring: \"var(--sidebar-ring)\",\n        },\n      },\n      fontFamily: {\n        sans: [\"var(--font-sans)\"],\n        serif: [\"var(--font-serif)\"],\n        mono: [\"var(--font-mono)\"],\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":2766},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n          await import(\"@replit/vite-plugin-dev-banner\").then((m) =>\n            m.devBanner(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":1080},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '5000', 10);\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":2066},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { WebSocketServer, WebSocket } from \"ws\";\nimport { storage } from \"./storage\";\nimport { \n  insertSessionSchema, \n  insertSpeakerSchema, \n  insertMessageSchema,\n  insertAIPersonalitySchema,\n  insertAnalyticsSchema,\n  type Session,\n  type Message \n} from \"@shared/schema\";\nimport { transcribeAudio, generateAIResponse, synthesizeSpeech, analyzeConversationTopic } from \"./services/openai\";\nimport { audioProcessor } from \"./services/audio\";\n\ninterface WebSocketClient {\n  ws: WebSocket;\n  sessionId?: string;\n  isHost?: boolean;\n  clientType?: 'browser' | 'desktop';\n  clientId: string;\n}\n\ninterface ProtocolMessage {\n  type: 'desktop_connect' | 'transcript' | 'audio_levels' | 'control_command' | 'ai_response' | 'status' | 'error' | 'connected';\n  source: 'browser' | 'desktop' | 'server';\n  data?: any;\n  timestamp: string;\n}\n\nconst clients = new Map<string, WebSocketClient>();\n\nasync function initializeDemoData() {\n  try {\n    const demoSessionId = \"demo-session-1\";\n    const existingSession = await storage.getSession(demoSessionId);\n    \n    if (!existingSession) {\n      // Create demo session directly with the ID we want\n      const demoSession = {\n        id: demoSessionId,\n        title: \"AI Cohost Demo Space\",\n        status: \"live\" as const,\n        startTime: new Date(),\n        endTime: null,\n        listeners: 3,\n        duration: 0,\n        metadata: null,\n      };\n      \n      // Store directly in memory\n      (storage as any).sessions.set(demoSessionId, demoSession);\n      \n      // Create demo speakers\n      const hostSpeaker = await storage.createSpeaker({\n        sessionId: demoSessionId,\n        name: \"Demo Host\",\n        handle: \"@demohost\",\n        isHost: true,\n        isGuest: false,\n        isAI: false,\n        avatar: null,\n      });\n      \n      const aiSpeaker = await storage.createSpeaker({\n        sessionId: demoSessionId,\n        name: \"AI Cohost\",\n        handle: \"@aicohost\",\n        isHost: false,\n        isGuest: false,\n        isAI: true,\n        avatar: null,\n      });\n      \n      // Initialize AI personality\n      await storage.upsertAIPersonality({\n        sessionId: demoSessionId,\n        voiceType: \"energetic-podcaster\",\n        comedyLevel: 60,\n        researchLevel: 40,\n        energyLevel: 75,\n        responseStyle: \"conversational\",\n      });\n      \n      // Initialize analytics\n      await storage.upsertAnalytics({\n        sessionId: demoSessionId,\n        aiSpeakingTime: 0.25,\n        totalResponses: 5,\n        avgResponseTime: 1.8,\n        interrupts: 1,\n        jokeSuccessRate: 0.8,\n      });\n      \n      // Initialize session memory\n      await storage.upsertSessionMemory({\n        sessionId: demoSessionId,\n        topics: [\n          { name: \"AI Technology\", mentions: 3 },\n          { name: \"Twitter Spaces\", mentions: 2 },\n          { name: \"Voice Technology\", mentions: 1 }\n        ],\n        speakerNotes: {\n          [hostSpeaker.id]: \"Interested in AI applications\",\n          [aiSpeaker.id]: \"AI cohost personality active\"\n        },\n        runningJokes: [\n          \"The AI that never runs out of coffee\",\n          \"Better response time than humans\"\n        ],\n        clipMoments: [\n          { topic: \"AI Technology\", timestamp: \"00:05:23\" },\n          { topic: \"Future of Voice\", timestamp: \"00:12:45\" }\n        ],\n      });\n      \n      // Add some demo messages\n      await storage.createMessage({\n        sessionId: demoSessionId,\n        speakerId: hostSpeaker.id,\n        content: \"Welcome everyone to our AI Cohost demo! Today we're exploring the future of voice-enabled AI assistants.\",\n        confidence: 0.95,\n        isAIGenerated: false,\n        metadata: null,\n      });\n      \n      await storage.createMessage({\n        sessionId: demoSessionId,\n        speakerId: aiSpeaker.id,\n        content: \"Thanks for having me! I'm excited to demonstrate how AI can enhance live conversations with real-time insights and engaging responses.\",\n        confidence: 0.92,\n        isAIGenerated: true,\n        metadata: null,\n      });\n      \n      console.log(\"Demo data initialized successfully\");\n    }\n  } catch (error) {\n    console.error(\"Failed to initialize demo data:\", error);\n  }\n}\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  const httpServer = createServer(app);\n  \n  // WebSocket server on /ws path to avoid conflicts with Vite HMR\n  const wss = new WebSocketServer({ server: httpServer, path: '/ws' });\n\n  // Initialize demo data if needed\n  await initializeDemoData();\n\n  // Session routes\n  app.get(\"/api/sessions\", async (req, res) => {\n    try {\n      const sessions = await storage.getAllSessions();\n      res.json(sessions);\n    } catch (error) {\n      res.status(500).json({ message: error instanceof Error ? error.message : 'Unknown error' });\n    }\n  });\n\n  app.post(\"/api/sessions\", async (req, res) => {\n    try {\n      const sessionData = insertSessionSchema.parse(req.body);\n      const session = await storage.createSession(sessionData);\n      \n      // Initialize default AI personality and analytics\n      await storage.upsertAIPersonality({ sessionId: session.id });\n      await storage.upsertAnalytics({ sessionId: session.id });\n      \n      res.json(session);\n    } catch (error) {\n      res.status(400).json({ message: error instanceof Error ? error.message : 'Unknown error' });\n    }\n  });\n\n  app.get(\"/api/sessions/:id\", async (req, res) => {\n    try {\n      const session = await storage.getSession(req.params.id);\n      if (!session) {\n        return res.status(404).json({ message: \"Session not found\" });\n      }\n      res.json(session);\n    } catch (error) {\n      res.status(500).json({ message: error instanceof Error ? error.message : 'Unknown error' });\n    }\n  });\n\n  app.patch(\"/api/sessions/:id\", async (req, res) => {\n    try {\n      const session = await storage.updateSession(req.params.id, req.body);\n      if (!session) {\n        return res.status(404).json({ message: \"Session not found\" });\n      }\n      res.json(session);\n    } catch (error) {\n      res.status(500).json({ message: error instanceof Error ? error.message : 'Unknown error' });\n    }\n  });\n\n  // Speaker routes\n  app.get(\"/api/sessions/:sessionId/speakers\", async (req, res) => {\n    try {\n      const speakers = await storage.getSessionSpeakers(req.params.sessionId);\n      res.json(speakers);\n    } catch (error) {\n      res.status(500).json({ message: error instanceof Error ? error.message : 'Unknown error' });\n    }\n  });\n\n  app.post(\"/api/sessions/:sessionId/speakers\", async (req, res) => {\n    try {\n      const speakerData = insertSpeakerSchema.parse({\n        ...req.body,\n        sessionId: req.params.sessionId\n      });\n      const speaker = await storage.createSpeaker(speakerData);\n      res.json(speaker);\n    } catch (error) {\n      res.status(400).json({ message: error instanceof Error ? error.message : 'Unknown error' });\n    }\n  });\n\n  // Message routes\n  app.get(\"/api/sessions/:sessionId/messages\", async (req, res) => {\n    try {\n      const messages = await storage.getSessionMessages(req.params.sessionId);\n      res.json(messages);\n    } catch (error) {\n      res.status(500).json({ message: error instanceof Error ? error.message : 'Unknown error' });\n    }\n  });\n\n  app.post(\"/api/sessions/:sessionId/messages\", async (req, res) => {\n    try {\n      const messageData = insertMessageSchema.parse({\n        ...req.body,\n        sessionId: req.params.sessionId\n      });\n      const message = await storage.createMessage(messageData);\n      \n      // Broadcast new message to all connected clients\n      broadcastToSession(req.params.sessionId, {\n        type: \"newMessage\",\n        data: message\n      });\n      \n      res.json(message);\n    } catch (error) {\n      res.status(400).json({ message: error instanceof Error ? error.message : 'Unknown error' });\n    }\n  });\n\n  // AI Personality routes\n  app.get(\"/api/sessions/:sessionId/personality\", async (req, res) => {\n    try {\n      const personality = await storage.getAIPersonality(req.params.sessionId);\n      if (!personality) {\n        return res.status(404).json({ message: \"AI personality not found\" });\n      }\n      res.json(personality);\n    } catch (error) {\n      res.status(500).json({ message: error instanceof Error ? error.message : 'Unknown error' });\n    }\n  });\n\n  app.put(\"/api/sessions/:sessionId/personality\", async (req, res) => {\n    try {\n      const personalityData = insertAIPersonalitySchema.parse({\n        ...req.body,\n        sessionId: req.params.sessionId\n      });\n      const personality = await storage.upsertAIPersonality(personalityData);\n      \n      // Broadcast personality update\n      broadcastToSession(req.params.sessionId, {\n        type: \"personalityUpdate\",\n        data: personality\n      });\n      \n      res.json(personality);\n    } catch (error) {\n      res.status(400).json({ message: error instanceof Error ? error.message : 'Unknown error' });\n    }\n  });\n\n  // Analytics routes\n  app.get(\"/api/sessions/:sessionId/analytics\", async (req, res) => {\n    try {\n      const analytics = await storage.getAnalytics(req.params.sessionId);\n      if (!analytics) {\n        return res.status(404).json({ message: \"Analytics not found\" });\n      }\n      res.json(analytics);\n    } catch (error) {\n      res.status(500).json({ message: error instanceof Error ? error.message : 'Unknown error' });\n    }\n  });\n\n  // Session memory routes\n  app.get(\"/api/sessions/:sessionId/memory\", async (req, res) => {\n    try {\n      const memory = await storage.getSessionMemory(req.params.sessionId);\n      if (!memory) {\n        return res.status(404).json({ message: \"Session memory not found\" });\n      }\n      res.json(memory);\n    } catch (error) {\n      res.status(500).json({ message: error instanceof Error ? error.message : 'Unknown error' });\n    }\n  });\n\n  // Test AI response generation\n  app.post(\"/api/sessions/:sessionId/test-ai-response\", async (req, res) => {\n    try {\n      const { transcript = \"This is a test message\" } = req.body;\n      const sessionId = req.params.sessionId;\n      \n      const messages = await storage.getSessionMessages(sessionId);\n      const recentMessages = messages.slice(-10);\n      const personality = await storage.getAIPersonality(sessionId);\n      const memory = await storage.getSessionMemory(sessionId);\n      \n      const context = {\n        topics: memory?.topics as Array<{ name: string; mentions: number }> || [],\n        speakerNotes: memory?.speakerNotes as Record<string, string> || {},\n        runningJokes: memory?.runningJokes || [],\n        recentMessages: recentMessages.map(m => ({\n          speaker: m.speakerId,\n          content: m.content,\n          timestamp: m.timestamp!\n        })),\n        personality: {\n          voiceType: personality?.voiceType || \"energetic-podcaster\",\n          comedyLevel: personality?.comedyLevel || 60,\n          researchLevel: personality?.researchLevel || 40,\n          energyLevel: personality?.energyLevel || 75,\n          responseStyle: personality?.responseStyle || \"conversational\"\n        }\n      };\n\n      const { response, confidence } = await generateAIResponse(transcript, context);\n      \n      // Generate speech audio\n      const audioBuffer = await synthesizeSpeech(response, context.personality.voiceType);\n      \n      res.json({\n        response,\n        confidence,\n        audioSize: audioBuffer.length,\n        context: {\n          topics: context.topics.length,\n          personality: context.personality.voiceType\n        }\n      });\n    } catch (error) {\n      res.status(500).json({ message: error instanceof Error ? error.message : 'Unknown error' });\n    }\n  });\n\n  // WebSocket connection handling\n  wss.on('connection', (ws, req) => {\n    const clientId = Date.now().toString() + Math.random().toString(36).substr(2, 9);\n    clients.set(clientId, { ws, clientId });\n\n    ws.on('message', async (data) => {\n      try {\n        const message = JSON.parse(data.toString());\n        await handleWebSocketMessage(clientId, message);\n      } catch (error) {\n        console.error('WebSocket message error:', error);\n        const errorMessage: ProtocolMessage = {\n          type: 'error',\n          source: 'server',\n          data: { message: error instanceof Error ? error.message : 'Unknown error' },\n          timestamp: new Date().toISOString()\n        };\n        ws.send(JSON.stringify(errorMessage));\n      }\n    });\n\n    ws.on('close', () => {\n      const client = clients.get(clientId);\n      if (client?.sessionId) {\n        // Notify other clients about disconnection\n        const statusMessage: ProtocolMessage = {\n          type: 'status',\n          source: 'server',\n          data: {\n            status: 'client_disconnected',\n            clientType: client.clientType,\n            clientId: clientId\n          },\n          timestamp: new Date().toISOString()\n        };\n        broadcastToSession(client.sessionId, statusMessage, clientId);\n      }\n      clients.delete(clientId);\n    });\n\n    // Send connection confirmation\n    const connectedMessage: ProtocolMessage = {\n      type: 'connected',\n      source: 'server',\n      data: { clientId },\n      timestamp: new Date().toISOString()\n    };\n    ws.send(JSON.stringify(connectedMessage));\n  });\n\n  // Audio processing setup\n  audioProcessor.on('audioLevel', (level) => {\n    broadcast({ type: 'audioLevel', data: level });\n  });\n\n  audioProcessor.on('audioReady', async (audioData) => {\n    try {\n      const { text, confidence } = await transcribeAudio(audioData);\n      if (text.trim()) {\n        broadcast({ type: 'transcription', data: { text, confidence } });\n      }\n    } catch (error) {\n      console.error('Transcription error:', error);\n    }\n  });\n\n  async function handleWebSocketMessage(clientId: string, message: any) {\n    const client = clients.get(clientId);\n    if (!client || client.ws.readyState !== WebSocket.OPEN) return;\n\n    // Handle legacy message format for backwards compatibility\n    if (!message.source && !message.timestamp) {\n      // Convert legacy format to new protocol format\n      const legacyMessage = message;\n      message = {\n        type: legacyMessage.type,\n        source: client.clientType || 'browser',\n        data: legacyMessage.data || legacyMessage,\n        timestamp: new Date().toISOString()\n      };\n    }\n\n    switch (message.type) {\n      case 'joinSession':\n        client.sessionId = message.sessionId || message.data?.sessionId;\n        client.isHost = message.isHost || message.data?.isHost || false;\n        client.clientType = message.clientType || message.data?.clientType || 'browser';\n        \n        // Notify other clients about new connection\n        if (client.sessionId) {\n          const statusMessage: ProtocolMessage = {\n            type: 'status',\n            source: 'server',\n            data: {\n              status: 'client_connected',\n              clientType: client.clientType,\n              clientId: clientId\n            },\n            timestamp: new Date().toISOString()\n          };\n          broadcastToSession(client.sessionId, statusMessage, clientId);\n        }\n        break;\n\n      case 'desktop_connect':\n        // Desktop client connection\n        client.clientType = 'desktop';\n        client.sessionId = message.data?.sessionId;\n        \n        // Notify browser clients about desktop connection\n        if (client.sessionId) {\n          const desktopConnectMessage: ProtocolMessage = {\n            type: 'status',\n            source: 'server',\n            data: {\n              status: 'desktop_connected',\n              sessionId: client.sessionId\n            },\n            timestamp: new Date().toISOString()\n          };\n          broadcastToBrowserClients(client.sessionId, desktopConnectMessage);\n        }\n        break;\n\n      case 'transcript':\n        // Desktop sends transcript → forward to browser\n        if (client.clientType === 'desktop' && client.sessionId) {\n          const transcriptMessage: ProtocolMessage = {\n            type: 'transcript',\n            source: 'desktop',\n            data: message.data,\n            timestamp: message.timestamp || new Date().toISOString()\n          };\n          broadcastToBrowserClients(client.sessionId, transcriptMessage);\n        }\n        break;\n\n      case 'ai_response':\n        // Browser sends AI response → forward to desktop for TTS\n        if (client.clientType === 'browser' && client.sessionId) {\n          const aiResponseMessage: ProtocolMessage = {\n            type: 'ai_response',\n            source: 'browser',\n            data: message.data,\n            timestamp: message.timestamp || new Date().toISOString()\n          };\n          broadcastToDesktopClients(client.sessionId, aiResponseMessage);\n        }\n        break;\n\n      case 'control_command':\n        // Browser sends control command → forward to desktop\n        if (client.clientType === 'browser' && client.sessionId) {\n          const controlMessage: ProtocolMessage = {\n            type: 'control_command',\n            source: 'browser',\n            data: message.data,\n            timestamp: message.timestamp || new Date().toISOString()\n          };\n          broadcastToDesktopClients(client.sessionId, controlMessage);\n        }\n        break;\n\n      case 'audio_levels':\n        // Desktop sends audio levels → forward to browser\n        if (client.clientType === 'desktop' && client.sessionId) {\n          const audioLevelMessage: ProtocolMessage = {\n            type: 'audio_levels',\n            source: 'desktop',\n            data: message.data,\n            timestamp: message.timestamp || new Date().toISOString()\n          };\n          broadcastToBrowserClients(client.sessionId, audioLevelMessage);\n        }\n        break;\n\n      case 'status':\n        // Forward status updates between clients\n        if (client.sessionId) {\n          const statusMessage: ProtocolMessage = {\n            type: 'status',\n            source: message.source || client.clientType || 'browser',\n            data: message.data,\n            timestamp: message.timestamp || new Date().toISOString()\n          };\n          broadcastToSession(client.sessionId, statusMessage, clientId);\n        }\n        break;\n\n      // Legacy message types for backwards compatibility\n      case 'audioData':\n        if (message.data) {\n          const audioBuffer = Buffer.from(message.data, 'base64');\n          audioProcessor.processAudioChunk(audioBuffer);\n        }\n        break;\n\n      case 'requestAIResponse':\n        await handleAIResponseRequest(client, message);\n        break;\n\n      case 'hotkey':\n        await handleHotkey(client, message);\n        break;\n\n      case 'updatePersonality':\n        await handlePersonalityUpdate(client, message);\n        break;\n    }\n  }\n\n  async function handleAIResponseRequest(client: WebSocketClient, message: any) {\n    if (!client.sessionId) return;\n\n    try {\n      const messages = await storage.getSessionMessages(client.sessionId);\n      const recentMessages = messages.slice(-10);\n      const personality = await storage.getAIPersonality(client.sessionId);\n      const memory = await storage.getSessionMemory(client.sessionId);\n      \n      const context = {\n        topics: memory?.topics as Array<{ name: string; mentions: number }> || [],\n        speakerNotes: memory?.speakerNotes as Record<string, string> || {},\n        runningJokes: memory?.runningJokes || [],\n        recentMessages: recentMessages.map(m => ({\n          speaker: m.speakerId,\n          content: m.content,\n          timestamp: m.timestamp!\n        })),\n        personality: {\n          voiceType: personality?.voiceType || \"energetic-podcaster\",\n          comedyLevel: personality?.comedyLevel || 60,\n          researchLevel: personality?.researchLevel || 40,\n          energyLevel: personality?.energyLevel || 75,\n          responseStyle: personality?.responseStyle || \"conversational\"\n        }\n      };\n\n      const { response, confidence } = await generateAIResponse(\n        message.transcript || \"\",\n        context\n      );\n\n      // Create AI message\n      const speakers = await storage.getSessionSpeakers(client.sessionId);\n      const aiSpeaker = speakers.find(s => s.isAI);\n      \n      if (aiSpeaker) {\n        const aiMessage = await storage.createMessage({\n          sessionId: client.sessionId,\n          speakerId: aiSpeaker.id,\n          content: response,\n          confidence,\n          isAIGenerated: true\n        });\n\n        // Generate speech audio\n        const audioBuffer = await synthesizeSpeech(response, context.personality.voiceType);\n        \n        broadcastToSession(client.sessionId, {\n          type: 'aiResponse',\n          data: {\n            message: aiMessage,\n            audio: audioBuffer.toString('base64')\n          }\n        });\n\n        // Update analytics\n        const analytics = await storage.getAnalytics(client.sessionId);\n        if (analytics) {\n          await storage.upsertAnalytics({\n            sessionId: client.sessionId,\n            totalResponses: (analytics.totalResponses || 0) + 1,\n            avgResponseTime: confidence * 2, // Simulate response time based on confidence\n            aiSpeakingTime: analytics.aiSpeakingTime,\n            interrupts: analytics.interrupts,\n            jokeSuccessRate: analytics.jokeSuccessRate\n          });\n        }\n      }\n    } catch (error) {\n      console.error('AI response error:', error);\n      client.ws.send(JSON.stringify({ type: 'error', message: error instanceof Error ? error.message : 'Unknown error' }));\n    }\n  }\n\n  async function handleHotkey(client: WebSocketClient, message: any) {\n    if (!client.sessionId) return;\n\n    const { key, command } = message;\n    \n    broadcastToSession(client.sessionId, {\n      type: 'hotkeyTriggered',\n      data: { key, command }\n    });\n\n    // Handle specific hotkey commands\n    switch (command) {\n      case 'riff':\n        await handleAIResponseRequest(client, { transcript: \"Continue with a creative riff on the current topic\" });\n        break;\n      case 'oneLiner':\n        await handleAIResponseRequest(client, { transcript: \"Respond with just a quick one-liner\" });\n        break;\n      case 'wrap':\n        await handleAIResponseRequest(client, { transcript: \"Help wrap up this topic in the next 10 seconds\" });\n        break;\n    }\n  }\n\n  async function handlePersonalityUpdate(client: WebSocketClient, message: any) {\n    if (!client.sessionId) return;\n\n    try {\n      const personality = await storage.upsertAIPersonality({\n        sessionId: client.sessionId,\n        ...message.personality\n      });\n\n      broadcastToSession(client.sessionId, {\n        type: 'personalityUpdated',\n        data: personality\n      });\n    } catch (error) {\n      console.error('Personality update error:', error);\n    }\n  }\n\n  function broadcast(message: any) {\n    clients.forEach(client => {\n      if (client.ws.readyState === WebSocket.OPEN) {\n        client.ws.send(JSON.stringify(message));\n      }\n    });\n  }\n\n  function broadcastToSession(sessionId: string, message: any, excludeClientId?: string) {\n    clients.forEach((client, clientId) => {\n      if (client.sessionId === sessionId && \n          client.ws.readyState === WebSocket.OPEN &&\n          clientId !== excludeClientId) {\n        client.ws.send(JSON.stringify(message));\n      }\n    });\n  }\n\n  function broadcastToBrowserClients(sessionId: string, message: ProtocolMessage) {\n    clients.forEach(client => {\n      if (client.sessionId === sessionId && \n          client.clientType === 'browser' && \n          client.ws.readyState === WebSocket.OPEN) {\n        client.ws.send(JSON.stringify(message));\n      }\n    });\n  }\n\n  function broadcastToDesktopClients(sessionId: string, message: ProtocolMessage) {\n    clients.forEach(client => {\n      if (client.sessionId === sessionId && \n          client.clientType === 'desktop' && \n          client.ws.readyState === WebSocket.OPEN) {\n        client.ws.send(JSON.stringify(message));\n      }\n    });\n  }\n\n  return httpServer;\n}\n","size_bytes":24126},"server/storage.ts":{"content":"import { \n  type Session, type InsertSession,\n  type Speaker, type InsertSpeaker,\n  type Message, type InsertMessage,\n  type SessionMemory, type InsertSessionMemory,\n  type AIPersonality, type InsertAIPersonality,\n  type Analytics, type InsertAnalytics\n} from \"@shared/schema\";\nimport { randomUUID } from \"crypto\";\n\nexport interface IStorage {\n  // Sessions\n  getSession(id: string): Promise<Session | undefined>;\n  createSession(session: InsertSession): Promise<Session>;\n  updateSession(id: string, updates: Partial<Session>): Promise<Session | undefined>;\n  getAllSessions(): Promise<Session[]>;\n\n  // Speakers\n  getSpeaker(id: string): Promise<Speaker | undefined>;\n  createSpeaker(speaker: InsertSpeaker): Promise<Speaker>;\n  getSessionSpeakers(sessionId: string): Promise<Speaker[]>;\n\n  // Messages\n  getMessage(id: string): Promise<Message | undefined>;\n  createMessage(message: InsertMessage): Promise<Message>;\n  getSessionMessages(sessionId: string): Promise<Message[]>;\n\n  // Session Memory\n  getSessionMemory(sessionId: string): Promise<SessionMemory | undefined>;\n  upsertSessionMemory(memory: InsertSessionMemory): Promise<SessionMemory>;\n\n  // AI Personality\n  getAIPersonality(sessionId: string): Promise<AIPersonality | undefined>;\n  upsertAIPersonality(personality: InsertAIPersonality): Promise<AIPersonality>;\n\n  // Analytics\n  getAnalytics(sessionId: string): Promise<Analytics | undefined>;\n  upsertAnalytics(analytics: InsertAnalytics): Promise<Analytics>;\n}\n\nexport class MemStorage implements IStorage {\n  private sessions: Map<string, Session> = new Map();\n  private speakers: Map<string, Speaker> = new Map();\n  private messages: Map<string, Message> = new Map();\n  private sessionMemories: Map<string, SessionMemory> = new Map();\n  private aiPersonalities: Map<string, AIPersonality> = new Map();\n  private analytics: Map<string, Analytics> = new Map();\n\n  async getSession(id: string): Promise<Session | undefined> {\n    return this.sessions.get(id);\n  }\n\n  async createSession(insertSession: InsertSession): Promise<Session> {\n    const id = randomUUID();\n    const session: Session = {\n      ...insertSession,\n      id,\n      startTime: new Date(),\n      endTime: null,\n      listeners: 0,\n      duration: 0,\n      metadata: insertSession.metadata || null,\n      status: insertSession.status || \"waiting\",\n    };\n    this.sessions.set(id, session);\n    return session;\n  }\n\n  async updateSession(id: string, updates: Partial<Session>): Promise<Session | undefined> {\n    const session = this.sessions.get(id);\n    if (!session) return undefined;\n    \n    const updatedSession = { ...session, ...updates };\n    this.sessions.set(id, updatedSession);\n    return updatedSession;\n  }\n\n  async getAllSessions(): Promise<Session[]> {\n    return Array.from(this.sessions.values());\n  }\n\n  async getSpeaker(id: string): Promise<Speaker | undefined> {\n    return this.speakers.get(id);\n  }\n\n  async createSpeaker(insertSpeaker: InsertSpeaker): Promise<Speaker> {\n    const id = randomUUID();\n    const speaker: Speaker = {\n      ...insertSpeaker,\n      id,\n      joinedAt: new Date(),\n      handle: insertSpeaker.handle || null,\n      isHost: insertSpeaker.isHost || false,\n      isGuest: insertSpeaker.isGuest || false,\n      isAI: insertSpeaker.isAI || false,\n      avatar: insertSpeaker.avatar || null,\n    };\n    this.speakers.set(id, speaker);\n    return speaker;\n  }\n\n  async getSessionSpeakers(sessionId: string): Promise<Speaker[]> {\n    return Array.from(this.speakers.values()).filter(s => s.sessionId === sessionId);\n  }\n\n  async getMessage(id: string): Promise<Message | undefined> {\n    return this.messages.get(id);\n  }\n\n  async createMessage(insertMessage: InsertMessage): Promise<Message> {\n    const id = randomUUID();\n    const message: Message = {\n      ...insertMessage,\n      id,\n      timestamp: new Date(),\n      metadata: insertMessage.metadata || null,\n      confidence: insertMessage.confidence || null,\n      isAIGenerated: insertMessage.isAIGenerated || false,\n    };\n    this.messages.set(id, message);\n    return message;\n  }\n\n  async getSessionMessages(sessionId: string): Promise<Message[]> {\n    return Array.from(this.messages.values())\n      .filter(m => m.sessionId === sessionId)\n      .sort((a, b) => a.timestamp!.getTime() - b.timestamp!.getTime());\n  }\n\n  async getSessionMemory(sessionId: string): Promise<SessionMemory | undefined> {\n    return this.sessionMemories.get(sessionId);\n  }\n\n  async upsertSessionMemory(insertMemory: InsertSessionMemory): Promise<SessionMemory> {\n    const existing = this.sessionMemories.get(insertMemory.sessionId);\n    const id = existing?.id || randomUUID();\n    \n    const memory: SessionMemory = {\n      ...insertMemory,\n      id,\n      updatedAt: new Date(),\n      topics: insertMemory.topics || null,\n      speakerNotes: insertMemory.speakerNotes || null,\n      clipMoments: insertMemory.clipMoments || null,\n      runningJokes: insertMemory.runningJokes || null,\n    };\n    this.sessionMemories.set(insertMemory.sessionId, memory);\n    return memory;\n  }\n\n  async getAIPersonality(sessionId: string): Promise<AIPersonality | undefined> {\n    return this.aiPersonalities.get(sessionId);\n  }\n\n  async upsertAIPersonality(insertPersonality: InsertAIPersonality): Promise<AIPersonality> {\n    const existing = this.aiPersonalities.get(insertPersonality.sessionId);\n    const id = existing?.id || randomUUID();\n    \n    const personality: AIPersonality = {\n      ...insertPersonality,\n      id,\n      updatedAt: new Date(),\n      voiceType: insertPersonality.voiceType || \"energetic-podcaster\",\n      comedyLevel: insertPersonality.comedyLevel || 60,\n      researchLevel: insertPersonality.researchLevel || 40,\n      energyLevel: insertPersonality.energyLevel || 75,\n      responseStyle: insertPersonality.responseStyle || \"conversational\",\n    };\n    this.aiPersonalities.set(insertPersonality.sessionId, personality);\n    return personality;\n  }\n\n  async getAnalytics(sessionId: string): Promise<Analytics | undefined> {\n    return this.analytics.get(sessionId);\n  }\n\n  async upsertAnalytics(insertAnalytics: InsertAnalytics): Promise<Analytics> {\n    const existing = this.analytics.get(insertAnalytics.sessionId);\n    const id = existing?.id || randomUUID();\n    \n    const analytics: Analytics = {\n      ...insertAnalytics,\n      id,\n      updatedAt: new Date(),\n      aiSpeakingTime: insertAnalytics.aiSpeakingTime || 0,\n      totalResponses: insertAnalytics.totalResponses || 0,\n      avgResponseTime: insertAnalytics.avgResponseTime || 0,\n      interrupts: insertAnalytics.interrupts || 0,\n      jokeSuccessRate: insertAnalytics.jokeSuccessRate || 0,\n    };\n    this.analytics.set(insertAnalytics.sessionId, analytics);\n    return analytics;\n  }\n}\n\nexport const storage = new MemStorage();\n","size_bytes":6795},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"shared/schema.ts":{"content":"import { sql } from \"drizzle-orm\";\nimport { pgTable, text, varchar, jsonb, timestamp, integer, boolean, real } from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\nexport const sessions = pgTable(\"sessions\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  title: text(\"title\").notNull(),\n  status: text(\"status\").notNull().default(\"waiting\"), // waiting, live, ended\n  startTime: timestamp(\"start_time\").defaultNow(),\n  endTime: timestamp(\"end_time\"),\n  listeners: integer(\"listeners\").default(0),\n  duration: integer(\"duration\").default(0), // in seconds\n  metadata: jsonb(\"metadata\"),\n});\n\nexport const speakers = pgTable(\"speakers\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  sessionId: varchar(\"session_id\").references(() => sessions.id).notNull(),\n  name: text(\"name\").notNull(),\n  handle: text(\"handle\"),\n  isHost: boolean(\"is_host\").default(false),\n  isGuest: boolean(\"is_guest\").default(false),\n  isAI: boolean(\"is_ai\").default(false),\n  avatar: text(\"avatar\"),\n  joinedAt: timestamp(\"joined_at\").defaultNow(),\n});\n\nexport const messages = pgTable(\"messages\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  sessionId: varchar(\"session_id\").references(() => sessions.id).notNull(),\n  speakerId: varchar(\"speaker_id\").references(() => speakers.id).notNull(),\n  content: text(\"content\").notNull(),\n  timestamp: timestamp(\"timestamp\").defaultNow(),\n  confidence: real(\"confidence\"),\n  isAIGenerated: boolean(\"is_ai_generated\").default(false),\n  metadata: jsonb(\"metadata\"),\n});\n\nexport const sessionMemory = pgTable(\"session_memory\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  sessionId: varchar(\"session_id\").references(() => sessions.id).notNull(),\n  topics: jsonb(\"topics\"), // { name: string, mentions: number }[]\n  speakerNotes: jsonb(\"speaker_notes\"), // { [speakerId]: string }\n  runningJokes: text(\"running_jokes\").array(),\n  clipMoments: jsonb(\"clip_moments\"), // { topic: string, timestamp: string }[]\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\nexport const aiPersonality = pgTable(\"ai_personality\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  sessionId: varchar(\"session_id\").references(() => sessions.id).notNull(),\n  voiceType: text(\"voice_type\").notNull().default(\"energetic-podcaster\"),\n  comedyLevel: integer(\"comedy_level\").default(60), // 0-100\n  researchLevel: integer(\"research_level\").default(40), // 0-100\n  energyLevel: integer(\"energy_level\").default(75), // 0-100\n  responseStyle: text(\"response_style\").default(\"conversational\"), // conversational, formal\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\nexport const analytics = pgTable(\"analytics\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  sessionId: varchar(\"session_id\").references(() => sessions.id).notNull(),\n  aiSpeakingTime: real(\"ai_speaking_time\").default(0), // percentage\n  totalResponses: integer(\"total_responses\").default(0),\n  avgResponseTime: real(\"avg_response_time\").default(0), // seconds\n  interrupts: integer(\"interrupts\").default(0),\n  jokeSuccessRate: real(\"joke_success_rate\").default(0), // percentage\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\nexport const insertSessionSchema = createInsertSchema(sessions).omit({\n  id: true,\n  startTime: true,\n});\n\nexport const insertSpeakerSchema = createInsertSchema(speakers).omit({\n  id: true,\n  joinedAt: true,\n});\n\nexport const insertMessageSchema = createInsertSchema(messages).omit({\n  id: true,\n  timestamp: true,\n});\n\nexport const insertSessionMemorySchema = createInsertSchema(sessionMemory).omit({\n  id: true,\n  updatedAt: true,\n});\n\nexport const insertAIPersonalitySchema = createInsertSchema(aiPersonality).omit({\n  id: true,\n  updatedAt: true,\n});\n\nexport const insertAnalyticsSchema = createInsertSchema(analytics).omit({\n  id: true,\n  updatedAt: true,\n});\n\nexport type Session = typeof sessions.$inferSelect;\nexport type InsertSession = z.infer<typeof insertSessionSchema>;\nexport type Speaker = typeof speakers.$inferSelect;\nexport type InsertSpeaker = z.infer<typeof insertSpeakerSchema>;\nexport type Message = typeof messages.$inferSelect;\nexport type InsertMessage = z.infer<typeof insertMessageSchema>;\nexport type SessionMemory = typeof sessionMemory.$inferSelect;\nexport type InsertSessionMemory = z.infer<typeof insertSessionMemorySchema>;\nexport type AIPersonality = typeof aiPersonality.$inferSelect;\nexport type InsertAIPersonality = z.infer<typeof insertAIPersonalitySchema>;\nexport type Analytics = typeof analytics.$inferSelect;\nexport type InsertAnalytics = z.infer<typeof insertAnalyticsSchema>;\n","size_bytes":4711},"client/src/App.tsx":{"content":"import { Switch, Route } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport Dashboard from \"@/pages/dashboard\";\nimport NotFound from \"@/pages/not-found\";\n\nfunction Router() {\n  return (\n    <Switch>\n      <Route path=\"/\" component={Dashboard} />\n      <Route component={NotFound} />\n    </Switch>\n  );\n}\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <TooltipProvider>\n        <Toaster />\n        <Router />\n      </TooltipProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":714},"client/src/index.css":{"content":"@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n:root {\n  --background: hsl(210, 11%, 10%);\n  --foreground: hsl(210, 11%, 96%);\n  --card: hsl(210, 11%, 13%);\n  --card-foreground: hsl(210, 11%, 96%);\n  --popover: hsl(210, 11%, 13%);\n  --popover-foreground: hsl(210, 11%, 96%);\n  --primary: hsl(206, 100%, 50%);\n  --primary-foreground: hsl(210, 11%, 96%);\n  --secondary: hsl(14, 90%, 60%);\n  --secondary-foreground: hsl(210, 11%, 96%);\n  --muted: hsl(210, 11%, 21%);\n  --muted-foreground: hsl(210, 11%, 65%);\n  --accent: hsl(141, 76%, 48%);\n  --accent-foreground: hsl(210, 11%, 96%);\n  --destructive: hsl(0, 84%, 60%);\n  --destructive-foreground: hsl(210, 11%, 96%);\n  --border: hsl(210, 11%, 21%);\n  --input: hsl(210, 11%, 21%);\n  --ring: hsl(206, 100%, 50%);\n  --chart-1: hsl(206, 100%, 50%);\n  --chart-2: hsl(159, 100%, 36%);\n  --chart-3: hsl(42, 92%, 56%);\n  --chart-4: hsl(147, 78%, 42%);\n  --chart-5: hsl(341, 75%, 51%);\n  --sidebar: hsl(210, 11%, 13%);\n  --sidebar-foreground: hsl(210, 11%, 96%);\n  --sidebar-primary: hsl(206, 100%, 50%);\n  --sidebar-primary-foreground: hsl(210, 11%, 96%);\n  --sidebar-accent: hsl(141, 76%, 48%);\n  --sidebar-accent-foreground: hsl(210, 11%, 96%);\n  --sidebar-border: hsl(210, 11%, 21%);\n  --sidebar-ring: hsl(206, 100%, 50%);\n  --font-sans: 'Inter', system-ui, sans-serif;\n  --font-serif: Georgia, serif;\n  --font-mono: 'JetBrains Mono', monospace;\n  --radius: 8px;\n  --live: hsl(141, 76%, 48%);\n  --speaking: hsl(14, 90%, 60%);\n  --processing: hsl(42, 96%, 59%);\n  --shadow-2xs: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-xs: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-sm: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 1px 2px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 1px 2px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-md: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 2px 4px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-lg: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 4px 6px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-xl: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 8px 10px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-2xl: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --tracking-normal: 0em;\n  --spacing: 0.25rem;\n}\n\n.dark {\n  --background: hsl(0, 0%, 0%);\n  --foreground: hsl(200, 6.6667%, 91.1765%);\n  --card: hsl(228, 9.8039%, 10%);\n  --card-foreground: hsl(0, 0%, 85.0980%);\n  --popover: hsl(0, 0%, 0%);\n  --popover-foreground: hsl(200, 6.6667%, 91.1765%);\n  --primary: hsl(203.7736, 87.6033%, 52.5490%);\n  --primary-foreground: hsl(0, 0%, 100%);\n  --secondary: hsl(195.0000, 15.3846%, 94.9020%);\n  --secondary-foreground: hsl(210, 25%, 7.8431%);\n  --muted: hsl(0, 0%, 9.4118%);\n  --muted-foreground: hsl(210, 3.3898%, 46.2745%);\n  --accent: hsl(205.7143, 70%, 7.8431%);\n  --accent-foreground: hsl(203.7736, 87.6033%, 52.5490%);\n  --destructive: hsl(356.3033, 90.5579%, 54.3137%);\n  --destructive-foreground: hsl(0, 0%, 100%);\n  --border: hsl(210, 5.2632%, 14.9020%);\n  --input: hsl(207.6923, 27.6596%, 18.4314%);\n  --ring: hsl(202.8169, 89.1213%, 53.1373%);\n  --chart-1: hsl(203.8863, 88.2845%, 53.1373%);\n  --chart-2: hsl(159.7826, 100%, 36.0784%);\n  --chart-3: hsl(42.0290, 92.8251%, 56.2745%);\n  --chart-4: hsl(147.1429, 78.5047%, 41.9608%);\n  --chart-5: hsl(341.4894, 75.2000%, 50.9804%);\n  --sidebar: hsl(228, 9.8039%, 10%);\n  --sidebar-foreground: hsl(0, 0%, 85.0980%);\n  --sidebar-primary: hsl(202.8169, 89.1213%, 53.1373%);\n  --sidebar-primary-foreground: hsl(0, 0%, 100%);\n  --sidebar-accent: hsl(205.7143, 70%, 7.8431%);\n  --sidebar-accent-foreground: hsl(203.7736, 87.6033%, 52.5490%);\n  --sidebar-border: hsl(205.7143, 15.7895%, 26.0784%);\n  --sidebar-ring: hsl(202.8169, 89.1213%, 53.1373%);\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased bg-background text-foreground;\n    font-family: var(--font-sans);\n  }\n}\n\n/* Custom audio meter gradient */\n.audio-meter {\n  background: linear-gradient(90deg, \n    var(--accent) 0%, \n    var(--accent) 60%, \n    var(--speaking) 80%, \n    var(--destructive) 100%);\n}\n\n/* Waveform animation */\n.waveform-bar {\n  animation: waveform 2s ease-in-out infinite;\n}\n\n.waveform-bar:nth-child(2) { animation-delay: 0.1s; }\n.waveform-bar:nth-child(3) { animation-delay: 0.2s; }\n.waveform-bar:nth-child(4) { animation-delay: 0.15s; }\n.waveform-bar:nth-child(5) { animation-delay: 0.05s; }\n.waveform-bar:nth-child(6) { animation-delay: 0.25s; }\n.waveform-bar:nth-child(7) { animation-delay: 0.3s; }\n.waveform-bar:nth-child(8) { animation-delay: 0.35s; }\n\n@keyframes waveform {\n  0%, 100% { transform: scaleY(0.3); }\n  50% { transform: scaleY(1); }\n}\n\n/* Pulse dot animation */\n.pulse-dot {\n  animation: pulse-dot 2s ease-in-out infinite;\n}\n\n@keyframes pulse-dot {\n  0%, 100% { opacity: 0.4; transform: scale(1); }\n  50% { opacity: 1; transform: scale(1.1); }\n}\n\n/* Transcript line animation */\n.transcript-line {\n  animation: slideInLeft 0.3s ease-out;\n}\n\n@keyframes slideInLeft {\n  from { opacity: 0; transform: translateX(-20px); }\n  to { opacity: 1; transform: translateX(0); }\n}\n\n/* Status indicator styles */\n.status-indicator {\n  position: relative;\n}\n\n.status-indicator::before {\n  content: '';\n  position: absolute;\n  top: -2px;\n  left: -2px;\n  right: -2px;\n  bottom: -2px;\n  border-radius: 50%;\n  opacity: 0.6;\n  animation: statusPulse 2s ease-in-out infinite;\n}\n\n.status-live::before {\n  background: var(--live);\n}\n\n.status-speaking::before {\n  background: var(--speaking);\n}\n\n.status-processing::before {\n  background: var(--processing);\n}\n\n@keyframes statusPulse {\n  0%, 100% { transform: scale(1); opacity: 0.6; }\n  50% { transform: scale(1.2); opacity: 0.8; }\n}\n\n/* Custom slider styles */\n.slider {\n  position: relative;\n  -webkit-appearance: none;\n  appearance: none;\n  background: transparent;\n  cursor: pointer;\n}\n\n.slider::-webkit-slider-track {\n  background: transparent;\n}\n\n.slider::-moz-range-track {\n  background: transparent;\n}\n\n.slider::-webkit-slider-thumb {\n  -webkit-appearance: none;\n  appearance: none;\n  height: 12px;\n  width: 12px;\n  border-radius: 50%;\n  background: hsl(var(--primary));\n  cursor: pointer;\n  border: 2px solid hsl(var(--background));\n  box-shadow: 0 0 0 1px hsl(var(--border));\n}\n\n.slider::-moz-range-thumb {\n  height: 12px;\n  width: 12px;\n  border-radius: 50%;\n  background: hsl(var(--primary));\n  cursor: pointer;\n  border: 2px solid hsl(var(--background));\n  box-shadow: 0 0 0 1px hsl(var(--border));\n}\n\n/* Font Awesome icons styling */\n.fas {\n  font-family: \"Font Awesome 6 Free\";\n  font-weight: 900;\n}\n","size_bytes":6751},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"server/services/audio.ts":{"content":"import { EventEmitter } from \"events\";\n\nexport class AudioProcessor extends EventEmitter {\n  private isProcessing = false;\n  private audioBuffer: Buffer[] = [];\n  private readonly SAMPLE_RATE = 44100;\n  private readonly CHUNK_SIZE = 4096;\n\n  constructor() {\n    super();\n  }\n\n  startProcessing() {\n    this.isProcessing = true;\n    this.emit(\"processingStarted\");\n  }\n\n  stopProcessing() {\n    this.isProcessing = false;\n    this.audioBuffer = [];\n    this.emit(\"processingStopped\");\n  }\n\n  processAudioChunk(chunk: Buffer): void {\n    if (!this.isProcessing) return;\n\n    this.audioBuffer.push(chunk);\n    \n    // Calculate audio levels for visualization\n    const audioLevel = this.calculateAudioLevel(chunk);\n    this.emit(\"audioLevel\", audioLevel);\n\n    // If we have enough audio data, process it\n    if (this.getTotalBufferSize() >= this.CHUNK_SIZE * 10) {\n      this.processBufferedAudio();\n    }\n  }\n\n  private calculateAudioLevel(buffer: Buffer): number {\n    // Convert buffer to audio samples and calculate RMS\n    const samples = new Int16Array(buffer.buffer, buffer.byteOffset, buffer.byteLength / 2);\n    let sum = 0;\n    \n    for (let i = 0; i < samples.length; i++) {\n      sum += samples[i] * samples[i];\n    }\n    \n    const rms = Math.sqrt(sum / samples.length);\n    const normalizedLevel = Math.min(rms / 32768, 1.0);\n    \n    // Convert to dB scale\n    const dbLevel = 20 * Math.log10(normalizedLevel + 0.001);\n    return Math.max(dbLevel, -60); // Clamp to -60dB minimum\n  }\n\n  private getTotalBufferSize(): number {\n    return this.audioBuffer.reduce((total, chunk) => total + chunk.length, 0);\n  }\n\n  private processBufferedAudio(): void {\n    const audioData = Buffer.concat(this.audioBuffer);\n    this.audioBuffer = [];\n    \n    // Emit processed audio for transcription\n    this.emit(\"audioReady\", audioData);\n  }\n\n  // Detect if someone is currently speaking\n  detectSpeechActivity(audioLevel: number): boolean {\n    const SPEECH_THRESHOLD = -40; // dB threshold for speech detection\n    return audioLevel > SPEECH_THRESHOLD;\n  }\n\n  // Simple voice activity detection\n  private voiceActivityBuffer: number[] = [];\n  private readonly VAD_BUFFER_SIZE = 10;\n\n  updateVoiceActivity(audioLevel: number): boolean {\n    this.voiceActivityBuffer.push(audioLevel);\n    \n    if (this.voiceActivityBuffer.length > this.VAD_BUFFER_SIZE) {\n      this.voiceActivityBuffer.shift();\n    }\n\n    // Consider speech active if recent average is above threshold\n    const avgLevel = this.voiceActivityBuffer.reduce((sum, level) => sum + level, 0) / this.voiceActivityBuffer.length;\n    return this.detectSpeechActivity(avgLevel);\n  }\n\n  // Audio routing helpers\n  createMixMinusOutput(inputAudio: Buffer, excludeChannels: number[] = []): Buffer {\n    // This would implement mix-minus to prevent feedback\n    // For now, return the input audio (would need more complex audio processing)\n    return inputAudio;\n  }\n\n  applyNoiseReduction(audioBuffer: Buffer): Buffer {\n    // Placeholder for noise reduction algorithm\n    // In production, this would use proper audio DSP\n    return audioBuffer;\n  }\n\n  applyEchoCanellation(audioBuffer: Buffer, referenceAudio: Buffer): Buffer {\n    // Placeholder for acoustic echo cancellation\n    // In production, this would implement AEC algorithms\n    return audioBuffer;\n  }\n}\n\nexport const audioProcessor = new AudioProcessor();\n","size_bytes":3376},"server/services/openai.ts":{"content":"import OpenAI from \"openai\";\n\n// Using GPT-4 for compatibility since GPT-5 may not be available\nconst apiKey = process.env.OPENAI_API_KEY || process.env.OPENAI_API_KEY_ENV_VAR;\nif (!apiKey || apiKey === \"sk-default\") {\n  console.error(\"OpenAI API key not found or invalid:\", apiKey ? `${apiKey.substring(0, 10)}...` : \"undefined\");\n} else {\n  console.log(\"OpenAI API key loaded:\", `${apiKey.substring(0, 10)}...${apiKey.substring(apiKey.length - 4)}`);\n}\n\nconst openai = new OpenAI({ \n  apiKey: apiKey || \"sk-default\"\n});\n\nexport interface ConversationContext {\n  topics: Array<{ name: string; mentions: number }>;\n  speakerNotes: Record<string, string>;\n  runningJokes: string[];\n  recentMessages: Array<{ speaker: string; content: string; timestamp: Date }>;\n  personality: {\n    voiceType: string;\n    comedyLevel: number;\n    researchLevel: number;\n    energyLevel: number;\n    responseStyle: string;\n  };\n}\n\nexport async function transcribeAudio(audioBuffer: Buffer): Promise<{ text: string; confidence?: number }> {\n  try {\n    // Create a temporary file-like object for the audio\n    const file = new File([audioBuffer], \"audio.wav\", { type: \"audio/wav\" });\n    \n    const transcription = await openai.audio.transcriptions.create({\n      file,\n      model: \"whisper-1\",\n      response_format: \"json\",\n      language: \"en\",\n    });\n\n    return {\n      text: transcription.text,\n      confidence: 0.95, // Whisper doesn't provide confidence, but it's generally high\n    };\n  } catch (error) {\n    console.error(\"Transcription error:\", error);\n    throw new Error(`Failed to transcribe audio: ${error instanceof Error ? error.message : 'Unknown error'}`);\n  }\n}\n\nexport async function generateAIResponse(\n  recentTranscript: string,\n  context: ConversationContext\n): Promise<{ response: string; confidence: number }> {\n  try {\n    const systemPrompt = createSystemPrompt(context);\n    const userPrompt = createUserPrompt(recentTranscript, context);\n\n    const response = await openai.chat.completions.create({\n      model: \"gpt-4o\",\n      messages: [\n        { role: \"system\", content: systemPrompt },\n        { role: \"user\", content: userPrompt }\n      ],\n      response_format: { type: \"json_object\" },\n      max_tokens: 500,\n    });\n\n    const result = JSON.parse(response.choices[0].message.content || \"{}\");\n    \n    return {\n      response: result.response || \"I see what you mean!\",\n      confidence: result.confidence || 0.8,\n    };\n  } catch (error) {\n    console.error(\"AI response error:\", error);\n    throw new Error(`Failed to generate AI response: ${error instanceof Error ? error.message : 'Unknown error'}`);\n  }\n}\n\nexport async function synthesizeSpeech(text: string, voiceType: string = \"nova\"): Promise<Buffer> {\n  try {\n    const voice = mapVoiceType(voiceType);\n    \n    const response = await openai.audio.speech.create({\n      model: \"tts-1\",\n      voice,\n      input: text,\n      response_format: \"wav\",\n    });\n\n    return Buffer.from(await response.arrayBuffer());\n  } catch (error) {\n    console.error(\"Speech synthesis error:\", error);\n    throw new Error(`Failed to synthesize speech: ${error instanceof Error ? error.message : 'Unknown error'}`);\n  }\n}\n\nexport async function analyzeConversationTopic(\n  messages: Array<{ speaker: string; content: string }>\n): Promise<{\n  topics: Array<{ name: string; mentions: number }>;\n  sentiment: string;\n  keyPoints: string[];\n}> {\n  try {\n    const conversationText = messages\n      .map(m => `${m.speaker}: ${m.content}`)\n      .join(\"\\n\");\n\n    const response = await openai.chat.completions.create({\n      model: \"gpt-4o\",\n      messages: [\n        {\n          role: \"system\",\n          content: `Analyze this conversation and extract key topics, overall sentiment, and main points. \n                   Respond with JSON in this format: \n                   { \"topics\": [{\"name\": \"topic\", \"mentions\": count}], \"sentiment\": \"positive/neutral/negative\", \"keyPoints\": [\"point1\", \"point2\"] }`\n        },\n        { role: \"user\", content: conversationText }\n      ],\n      response_format: { type: \"json_object\" },\n    });\n\n    return JSON.parse(response.choices[0].message.content || \"{}\");\n  } catch (error) {\n    console.error(\"Topic analysis error:\", error);\n    return { topics: [], sentiment: \"neutral\", keyPoints: [] };\n  }\n}\n\nfunction createSystemPrompt(context: ConversationContext): string {\n  const { personality } = context;\n  \n  return `You are a charismatic AI cohost for a Twitter/X Space. Your mission is to keep conversations flowing, add humor and insight, and be a beloved personality.\n\nPERSONALITY SETTINGS:\n- Voice Type: ${personality.voiceType}\n- Comedy Level: ${personality.comedyLevel}% (0=serious, 100=comedian)\n- Research Level: ${personality.researchLevel}% (0=casual, 100=academic)\n- Energy Level: ${personality.energyLevel}% (0=calm, 100=hyperactive)\n- Style: ${personality.responseStyle}\n\nCONTEXT AWARENESS:\n- Current topics: ${context.topics.map(t => `${t.name} (${t.mentions}x)`).join(\", \")}\n- Running jokes: ${context.runningJokes.join(\", \")}\n- Speaker notes: ${Object.entries(context.speakerNotes).map(([k, v]) => `${k}: ${v}`).join(\"; \")}\n\nRESPONSE RULES:\n- Keep responses under 30 seconds of speech (roughly 75 words)\n- Match the energy and tone of the conversation\n- Include callbacks to previous topics when relevant\n- End with a question or smooth handoff to keep conversation flowing\n- Use humor appropriately based on comedy level setting\n\nRespond with JSON: {\"response\": \"your response text\", \"confidence\": 0.0-1.0}`;\n}\n\nfunction createUserPrompt(transcript: string, context: ConversationContext): string {\n  return `Recent conversation:\n${transcript}\n\nRecent messages context:\n${context.recentMessages.map(m => `${m.speaker}: ${m.content}`).slice(-3).join(\"\\n\")}\n\nGenerate an appropriate response as the AI cohost. Consider the ongoing conversation, your personality settings, and aim to add value while keeping things engaging.`;\n}\n\nfunction mapVoiceType(voiceType: string): \"alloy\" | \"echo\" | \"fable\" | \"onyx\" | \"nova\" | \"shimmer\" {\n  switch (voiceType) {\n    case \"energetic-podcaster\": return \"nova\";\n    case \"street-comedy-voice\": return \"echo\";\n    case \"geeky-ufo-researcher\": return \"fable\";\n    case \"professional-moderator\": return \"onyx\";\n    default: return \"nova\";\n  }\n}\n","size_bytes":6300},"client/src/components/analytics-panel.tsx":{"content":"import { useEffect, useState } from \"react\";\n\ninterface AnalyticsPanelProps {\n  analytics: {\n    aiSpeakingTime: number;\n    totalResponses: number;\n    avgResponseTime: number;\n    interrupts: number;\n    jokeSuccessRate: number;\n  };\n  clipMoments?: Array<{ topic: string; timestamp: string }>;\n  onGenerateIntro: () => void;\n  onCreateSegue: () => void;\n  onSummarizeSession: () => void;\n  onExportTranscript: () => void;\n}\n\nexport function AnalyticsPanel({\n  analytics,\n  clipMoments = [],\n  onGenerateIntro,\n  onCreateSegue,\n  onSummarizeSession,\n  onExportTranscript,\n}: AnalyticsPanelProps) {\n  const [animatedValues, setAnimatedValues] = useState({\n    aiSpeakingTime: 0,\n    totalResponses: 0,\n    avgResponseTime: 0,\n    jokeSuccessRate: 0,\n  });\n\n  useEffect(() => {\n    // Animate counter updates\n    const duration = 1000; // 1 second\n    const steps = 60;\n    const stepDuration = duration / steps;\n\n    let step = 0;\n    const interval = setInterval(() => {\n      step++;\n      const progress = step / steps;\n      \n      setAnimatedValues({\n        aiSpeakingTime: Math.round(analytics.aiSpeakingTime * progress * 100) / 100,\n        totalResponses: Math.round(analytics.totalResponses * progress),\n        avgResponseTime: Math.round(analytics.avgResponseTime * progress * 10) / 10,\n        jokeSuccessRate: Math.round(analytics.jokeSuccessRate * progress * 100) / 100,\n      });\n\n      if (step >= steps) {\n        clearInterval(interval);\n        setAnimatedValues({\n          aiSpeakingTime: analytics.aiSpeakingTime,\n          totalResponses: analytics.totalResponses,\n          avgResponseTime: analytics.avgResponseTime,\n          jokeSuccessRate: analytics.jokeSuccessRate,\n        });\n      }\n    }, stepDuration);\n\n    return () => clearInterval(interval);\n  }, [analytics]);\n\n  const formatPercentage = (value: number) => {\n    return `${Math.round(value * 100)}%`;\n  };\n\n  const formatTime = (value: number) => {\n    return `${value.toFixed(1)}s`;\n  };\n\n  return (\n    <div className=\"col-span-3 space-y-6\">\n      {/* AI Personality Controls - This would be moved to a separate component */}\n      {/* Live Analytics */}\n      <div className=\"bg-card rounded-lg p-6 border border-border\">\n        <h3 className=\"text-lg font-semibold mb-4 flex items-center gap-2\">\n          <i className=\"fas fa-chart-line text-accent\"></i>\n          Live Analytics\n        </h3>\n        \n        <div className=\"space-y-4\">\n          <div className=\"grid grid-cols-2 gap-4\">\n            <div className=\"text-center\">\n              <div className=\"text-2xl font-bold text-primary\" data-testid=\"text-speaking-time\">\n                {formatPercentage(animatedValues.aiSpeakingTime)}\n              </div>\n              <div className=\"text-xs text-muted-foreground\">AI Speaking Time</div>\n            </div>\n            <div className=\"text-center\">\n              <div className=\"text-2xl font-bold text-secondary\" data-testid=\"text-total-responses\">\n                {animatedValues.totalResponses}\n              </div>\n              <div className=\"text-xs text-muted-foreground\">Total Responses</div>\n            </div>\n          </div>\n          \n          <div className=\"space-y-2\">\n            <div className=\"flex justify-between items-center text-sm\">\n              <span className=\"text-muted-foreground\">Avg Response Time</span>\n              <span className=\"font-mono\" data-testid=\"text-avg-response-time\">\n                {formatTime(animatedValues.avgResponseTime)}\n              </span>\n            </div>\n            <div className=\"flex justify-between items-center text-sm\">\n              <span className=\"text-muted-foreground\">Interrupts</span>\n              <span className=\"font-mono\" data-testid=\"text-interrupts\">\n                {analytics.interrupts}\n              </span>\n            </div>\n            <div className=\"flex justify-between items-center text-sm\">\n              <span className=\"text-muted-foreground\">Joke Success Rate</span>\n              <span className=\"font-mono text-accent\" data-testid=\"text-joke-success\">\n                {formatPercentage(animatedValues.jokeSuccessRate)}\n              </span>\n            </div>\n          </div>\n          \n          <div className=\"pt-4 border-t border-border\">\n            <h4 className=\"text-sm font-medium mb-2\">Clip-Worthy Moments</h4>\n            <div className=\"space-y-2 text-sm\" data-testid=\"clip-moments\">\n              {clipMoments.length ? (\n                clipMoments.map((moment, index) => (\n                  <div key={index} className=\"flex justify-between items-center\">\n                    <span className=\"text-muted-foreground\">{moment.topic}</span>\n                    <span className=\"text-xs font-mono\">{moment.timestamp}</span>\n                  </div>\n                ))\n              ) : (\n                <div className=\"text-muted-foreground\">No clip moments identified yet</div>\n              )}\n            </div>\n          </div>\n        </div>\n      </div>\n      \n      {/* Quick Actions */}\n      <div className=\"bg-card rounded-lg p-6 border border-border\">\n        <h3 className=\"text-lg font-semibold mb-4 flex items-center gap-2\">\n          <i className=\"fas fa-bolt text-primary\"></i>\n          Quick Actions\n        </h3>\n        \n        <div className=\"space-y-2\">\n          <button \n            className=\"w-full px-4 py-2 bg-primary text-primary-foreground rounded-lg text-sm font-medium hover:bg-primary/90 transition-colors\" \n            onClick={onGenerateIntro}\n            data-testid=\"button-generate-intro\"\n          >\n            <i className=\"fas fa-play mr-2\"></i>Generate Cold Open\n          </button>\n          <button \n            className=\"w-full px-4 py-2 bg-secondary text-secondary-foreground rounded-lg text-sm font-medium hover:bg-secondary/90 transition-colors\" \n            onClick={onCreateSegue}\n            data-testid=\"button-create-segue\"\n          >\n            <i className=\"fas fa-arrow-right mr-2\"></i>Create Segment Bumper\n          </button>\n          <button \n            className=\"w-full px-4 py-2 bg-accent text-accent-foreground rounded-lg text-sm font-medium hover:bg-accent/90 transition-colors\" \n            onClick={onSummarizeSession}\n            data-testid=\"button-summarize-session\"\n          >\n            <i className=\"fas fa-file-alt mr-2\"></i>Generate Summary\n          </button>\n          <button \n            className=\"w-full px-4 py-2 bg-muted text-muted-foreground rounded-lg text-sm font-medium hover:bg-muted/80 transition-colors\" \n            onClick={onExportTranscript}\n            data-testid=\"button-export-transcript\"\n          >\n            <i className=\"fas fa-download mr-2\"></i>Export Transcript\n          </button>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":6767},"client/src/components/audio-controls.tsx":{"content":"import { useEffect, useState } from \"react\";\n\ninterface AudioControlsProps {\n  audioLevel: number;\n  aiStatus: string;\n  aiResponseTime: number;\n  aiConfidence: number;\n  onPauseAI: () => void;\n  onSkipTurn: () => void;\n}\n\nexport function AudioControls({\n  audioLevel,\n  aiStatus,\n  aiResponseTime,\n  aiConfidence,\n  onPauseAI,\n  onSkipTurn,\n}: AudioControlsProps) {\n  const [waveformData, setWaveformData] = useState<number[]>([0.3, 0.8, 0.5, 1, 0.2, 0.6, 0.9, 0.4]);\n\n  useEffect(() => {\n    // Simulate waveform animation based on audio level\n    const interval = setInterval(() => {\n      setWaveformData(prev => prev.map(() => Math.random()));\n    }, 200);\n\n    return () => clearInterval(interval);\n  }, [audioLevel]);\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case 'speaking': return 'text-speaking bg-speaking';\n      case 'processing': return 'text-processing bg-processing';\n      case 'listening': return 'text-accent bg-accent';\n      default: return 'text-muted-foreground bg-muted';\n    }\n  };\n\n  const getStatusIndicatorClass = (status: string) => {\n    switch (status) {\n      case 'speaking': return 'status-indicator status-speaking';\n      case 'processing': return 'status-indicator status-processing';\n      default: return 'status-indicator status-live';\n    }\n  };\n\n  const formatAudioLevel = (level: number) => {\n    return `${Math.round(level)} dB`;\n  };\n\n  return (\n    <div className=\"col-span-3 space-y-6\">\n      {/* Audio Input Monitoring */}\n      <div className=\"bg-card rounded-lg p-6 border border-border\">\n        <h3 className=\"text-lg font-semibold mb-4 flex items-center gap-2\">\n          <i className=\"fas fa-volume-up text-primary\"></i>\n          Audio Input\n        </h3>\n        \n        {/* Input Level Meters */}\n        <div className=\"space-y-4\">\n          <div>\n            <div className=\"flex justify-between text-sm text-muted-foreground mb-2\">\n              <span>Space Audio</span>\n              <span data-testid=\"text-space-audio-level\">{formatAudioLevel(audioLevel)}</span>\n            </div>\n            <div className=\"h-2 bg-muted rounded-full overflow-hidden\">\n              <div \n                className=\"audio-meter h-full rounded-full transition-all duration-200\"\n                style={{ width: `${Math.max(0, Math.min(100, (audioLevel + 60) / 60 * 100))}%` }}\n              ></div>\n            </div>\n          </div>\n          \n          <div>\n            <div className=\"flex justify-between text-sm text-muted-foreground mb-2\">\n              <span>AI Output</span>\n              <span data-testid=\"text-ai-audio-level\">{formatAudioLevel(audioLevel - 6)}</span>\n            </div>\n            <div className=\"h-2 bg-muted rounded-full overflow-hidden\">\n              <div \n                className=\"audio-meter h-full rounded-full transition-all duration-200\"\n                style={{ width: `${Math.max(0, Math.min(100, (audioLevel + 66) / 60 * 100))}%` }}\n              ></div>\n            </div>\n          </div>\n        </div>\n        \n        {/* Waveform Visualization */}\n        <div className=\"mt-6\">\n          <div className=\"text-sm text-muted-foreground mb-2\">Live Waveform</div>\n          <div className=\"flex items-end justify-center gap-1 h-16\" data-testid=\"waveform-display\">\n            {waveformData.map((height, index) => (\n              <div\n                key={index}\n                className=\"waveform-bar w-1 bg-primary rounded-full transition-all duration-200\"\n                style={{ height: `${height * 64}px` }}\n              ></div>\n            ))}\n          </div>\n        </div>\n      </div>\n      \n      {/* AI Status & Controls */}\n      <div className=\"bg-card rounded-lg p-6 border border-border\">\n        <h3 className=\"text-lg font-semibold mb-4 flex items-center gap-2\">\n          <i className=\"fas fa-robot text-secondary\"></i>\n          AI Cohost\n        </h3>\n        \n        <div className=\"space-y-4\">\n          <div className=\"flex items-center justify-between\">\n            <span className=\"text-sm text-muted-foreground\">Status</span>\n            <div className=\"flex items-center gap-2\">\n              <div className={`w-3 h-3 rounded-full ${getStatusIndicatorClass(aiStatus)}`}></div>\n              <span className={`text-sm font-medium ${getStatusColor(aiStatus).split(' ')[0]}`} data-testid=\"text-ai-status\">\n                {aiStatus.charAt(0).toUpperCase() + aiStatus.slice(1)}\n              </span>\n            </div>\n          </div>\n          \n          <div className=\"flex items-center justify-between\">\n            <span className=\"text-sm text-muted-foreground\">Response Time</span>\n            <span className=\"text-sm font-mono\" data-testid=\"text-ai-response-time\">\n              {aiResponseTime.toFixed(1)}s\n            </span>\n          </div>\n          \n          <div className=\"flex items-center justify-between\">\n            <span className=\"text-sm text-muted-foreground\">Confidence</span>\n            <span className=\"text-sm font-mono\" data-testid=\"text-ai-confidence\">\n              {Math.round(aiConfidence * 100)}%\n            </span>\n          </div>\n          \n          {/* Quick Action Buttons */}\n          <div className=\"grid grid-cols-2 gap-2 mt-4\">\n            <button \n              className=\"px-3 py-2 bg-primary text-primary-foreground rounded-lg text-sm font-medium hover:bg-primary/90 transition-colors\" \n              onClick={onPauseAI}\n              data-testid=\"button-pause-ai\"\n            >\n              <i className=\"fas fa-pause mr-2\"></i>Pause\n            </button>\n            <button \n              className=\"px-3 py-2 bg-muted text-muted-foreground rounded-lg text-sm font-medium hover:bg-muted/80 transition-colors\" \n              onClick={onSkipTurn}\n              data-testid=\"button-skip-turn\"\n            >\n              <i className=\"fas fa-forward mr-2\"></i>Skip\n            </button>\n          </div>\n        </div>\n      </div>\n      \n      {/* Hotkey Commands */}\n      <div className=\"bg-card rounded-lg p-6 border border-border\">\n        <h3 className=\"text-lg font-semibold mb-4 flex items-center gap-2\">\n          <i className=\"fas fa-keyboard text-accent\"></i>\n          Quick Commands\n        </h3>\n        \n        <div className=\"space-y-2 text-sm\">\n          <div className=\"flex justify-between items-center py-1\">\n            <span className=\"text-muted-foreground\">Riff on that</span>\n            <kbd className=\"px-2 py-1 bg-muted rounded text-xs font-mono\">R</kbd>\n          </div>\n          <div className=\"flex justify-between items-center py-1\">\n            <span className=\"text-muted-foreground\">One-liner only</span>\n            <kbd className=\"px-2 py-1 bg-muted rounded text-xs font-mono\">1</kbd>\n          </div>\n          <div className=\"flex justify-between items-center py-1\">\n            <span className=\"text-muted-foreground\">Wrap in 10</span>\n            <kbd className=\"px-2 py-1 bg-muted rounded text-xs font-mono\">W</kbd>\n          </div>\n          <div className=\"flex justify-between items-center py-1\">\n            <span className=\"text-muted-foreground\">Switch tone</span>\n            <kbd className=\"px-2 py-1 bg-muted rounded text-xs font-mono\">T</kbd>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":7272},"client/src/components/personality-controls.tsx":{"content":"import { useState } from \"react\";\n\ninterface PersonalityControlsProps {\n  personality: {\n    voiceType: string;\n    comedyLevel: number;\n    researchLevel: number;\n    energyLevel: number;\n    responseStyle: string;\n  };\n  onPersonalityChange: (updates: Partial<PersonalityControlsProps['personality']>) => void;\n}\n\nconst voiceOptions = [\n  { value: 'energetic-podcaster', label: 'Energetic Podcaster' },\n  { value: 'street-comedy-voice', label: 'Street Comedy Voice' },\n  { value: 'geeky-ufo-researcher', label: 'Geeky UFO Researcher' },\n  { value: 'professional-moderator', label: 'Professional Moderator' },\n];\n\nexport function PersonalityControls({ personality, onPersonalityChange }: PersonalityControlsProps) {\n  const [previewingVoice, setPreviewingVoice] = useState<string | null>(null);\n\n  const handleSliderChange = (key: keyof typeof personality, value: number) => {\n    onPersonalityChange({ [key]: value });\n  };\n\n  const handleVoiceChange = (voiceType: string) => {\n    onPersonalityChange({ voiceType });\n  };\n\n  const handleStyleChange = (responseStyle: string) => {\n    onPersonalityChange({ responseStyle });\n  };\n\n  const previewVoice = (voiceType: string) => {\n    setPreviewingVoice(voiceType);\n    // TODO: Implement voice preview functionality\n    setTimeout(() => setPreviewingVoice(null), 2000);\n  };\n\n  return (\n    <div className=\"bg-card rounded-lg p-6 border border-border\">\n      <h3 className=\"text-lg font-semibold mb-4 flex items-center gap-2\">\n        <i className=\"fas fa-masks-theater text-secondary\"></i>\n        Personality\n      </h3>\n      \n      <div className=\"space-y-4\">\n        <div>\n          <label className=\"text-sm text-muted-foreground mb-2 block\">Current Voice</label>\n          <select \n            className=\"w-full p-2 bg-input border border-border rounded-lg text-sm\"\n            value={personality.voiceType}\n            onChange={(e) => handleVoiceChange(e.target.value)}\n            data-testid=\"select-voice-type\"\n          >\n            {voiceOptions.map((option) => (\n              <option key={option.value} value={option.value}>\n                {option.label}\n              </option>\n            ))}\n          </select>\n          <button\n            className=\"mt-2 text-xs text-primary hover:text-primary/80 transition-colors\"\n            onClick={() => previewVoice(personality.voiceType)}\n            disabled={previewingVoice !== null}\n            data-testid=\"button-preview-voice\"\n          >\n            {previewingVoice ? 'Playing preview...' : 'Preview voice'}\n          </button>\n        </div>\n        \n        <div>\n          <label className=\"text-sm text-muted-foreground mb-2 block\">Personality Mix</label>\n          <div className=\"space-y-3\">\n            <div>\n              <div className=\"flex justify-between text-xs mb-1\">\n                <span>Comedy</span>\n                <span data-testid=\"text-comedy-level\">{personality.comedyLevel}%</span>\n              </div>\n              <input\n                type=\"range\"\n                min=\"0\"\n                max=\"100\"\n                value={personality.comedyLevel}\n                onChange={(e) => handleSliderChange('comedyLevel', parseInt(e.target.value))}\n                className=\"w-full h-1 bg-muted rounded-full appearance-none cursor-pointer slider\"\n                data-testid=\"slider-comedy\"\n              />\n              <div className=\"h-1 bg-muted rounded-full -mt-1\">\n                <div \n                  className=\"h-full bg-secondary rounded-full transition-all duration-200\"\n                  style={{ width: `${personality.comedyLevel}%` }}\n                ></div>\n              </div>\n            </div>\n            \n            <div>\n              <div className=\"flex justify-between text-xs mb-1\">\n                <span>Research</span>\n                <span data-testid=\"text-research-level\">{personality.researchLevel}%</span>\n              </div>\n              <input\n                type=\"range\"\n                min=\"0\"\n                max=\"100\"\n                value={personality.researchLevel}\n                onChange={(e) => handleSliderChange('researchLevel', parseInt(e.target.value))}\n                className=\"w-full h-1 bg-muted rounded-full appearance-none cursor-pointer slider opacity-0\"\n                data-testid=\"slider-research\"\n              />\n              <div className=\"h-1 bg-muted rounded-full -mt-1\">\n                <div \n                  className=\"h-full bg-accent rounded-full transition-all duration-200\"\n                  style={{ width: `${personality.researchLevel}%` }}\n                ></div>\n              </div>\n            </div>\n            \n            <div>\n              <div className=\"flex justify-between text-xs mb-1\">\n                <span>Energy Level</span>\n                <span data-testid=\"text-energy-level\">{personality.energyLevel}%</span>\n              </div>\n              <input\n                type=\"range\"\n                min=\"0\"\n                max=\"100\"\n                value={personality.energyLevel}\n                onChange={(e) => handleSliderChange('energyLevel', parseInt(e.target.value))}\n                className=\"w-full h-1 bg-muted rounded-full appearance-none cursor-pointer slider opacity-0\"\n                data-testid=\"slider-energy\"\n              />\n              <div className=\"h-1 bg-muted rounded-full -mt-1\">\n                <div \n                  className=\"h-full bg-primary rounded-full transition-all duration-200\"\n                  style={{ width: `${personality.energyLevel}%` }}\n                ></div>\n              </div>\n            </div>\n          </div>\n        </div>\n        \n        <div>\n          <label className=\"text-sm text-muted-foreground mb-2 block\">Response Style</label>\n          <div className=\"grid grid-cols-2 gap-2\">\n            <button \n              className={`px-3 py-2 rounded-lg text-sm font-medium transition-colors ${\n                personality.responseStyle === 'conversational'\n                  ? 'bg-primary text-primary-foreground'\n                  : 'bg-muted text-muted-foreground hover:bg-muted/80'\n              }`}\n              onClick={() => handleStyleChange('conversational')}\n              data-testid=\"button-conversational-style\"\n            >\n              Conversational\n            </button>\n            <button \n              className={`px-3 py-2 rounded-lg text-sm font-medium transition-colors ${\n                personality.responseStyle === 'formal'\n                  ? 'bg-primary text-primary-foreground'\n                  : 'bg-muted text-muted-foreground hover:bg-muted/80'\n              }`}\n              onClick={() => handleStyleChange('formal')}\n              data-testid=\"button-formal-style\"\n            >\n              Formal\n            </button>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":6842},"client/src/components/session-header.tsx":{"content":"import { useState, useEffect } from \"react\";\n\ninterface SessionHeaderProps {\n  sessionId?: string;\n  status: string;\n  duration: number;\n  listeners: number;\n}\n\nexport function SessionHeader({ sessionId, status, duration, listeners }: SessionHeaderProps) {\n  const [formattedDuration, setFormattedDuration] = useState(\"00:00:00\");\n\n  useEffect(() => {\n    const formatDuration = (seconds: number) => {\n      const hours = Math.floor(seconds / 3600);\n      const minutes = Math.floor((seconds % 3600) / 60);\n      const secs = seconds % 60;\n      return `${hours.toString().padStart(2, '0')}:${minutes.toString().padStart(2, '0')}:${secs.toString().padStart(2, '0')}`;\n    };\n\n    setFormattedDuration(formatDuration(duration));\n  }, [duration]);\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case 'live': return 'bg-accent';\n      case 'waiting': return 'bg-processing';\n      case 'ended': return 'bg-muted';\n      default: return 'bg-muted';\n    }\n  };\n\n  const getStatusIndicatorClass = (status: string) => {\n    switch (status) {\n      case 'live': return 'status-indicator status-live';\n      case 'processing': return 'status-indicator status-processing';\n      default: return 'status-indicator';\n    }\n  };\n\n  return (\n    <header className=\"bg-card border-b border-border px-6 py-4 flex items-center justify-between\">\n      <div className=\"flex items-center gap-4\">\n        <div className=\"flex items-center gap-3\">\n          <i className=\"fas fa-microphone-alt text-2xl text-primary\"></i>\n          <h1 className=\"text-xl font-semibold\">AI Cohost Control Center</h1>\n        </div>\n        <div className={`flex items-center gap-2 px-3 py-1 rounded-full text-sm font-medium ${getStatusColor(status)}`}>\n          <div className={`w-2 h-2 rounded-full ${getStatusColor(status)} ${getStatusIndicatorClass(status)}`}></div>\n          <span data-testid=\"session-status\">{status.toUpperCase()}</span>\n        </div>\n      </div>\n      \n      <div className=\"flex items-center gap-4\">\n        <div className=\"text-sm text-muted-foreground\" data-testid=\"session-duration\">\n          {formattedDuration}\n        </div>\n        <div className=\"flex items-center gap-2\">\n          <i className=\"fas fa-users text-muted-foreground\"></i>\n          <span className=\"text-sm font-medium\" data-testid=\"session-listeners\">{listeners}</span>\n        </div>\n        <button \n          className=\"p-2 hover:bg-muted rounded-lg transition-colors\" \n          data-testid=\"button-settings\"\n        >\n          <i className=\"fas fa-cog text-muted-foreground\"></i>\n        </button>\n      </div>\n    </header>\n  );\n}\n","size_bytes":2633},"client/src/components/transcript-panel.tsx":{"content":"import { useEffect, useRef } from \"react\";\nimport { type Message, type Speaker } from \"@shared/schema\";\n\ninterface TranscriptPanelProps {\n  messages: Message[];\n  speakers: Speaker[];\n  sessionMemory?: {\n    topics: Array<{ name: string; mentions: number }>;\n    speakerNotes: Record<string, string>;\n    runningJokes: string[];\n  };\n}\n\nexport function TranscriptPanel({ messages, speakers, sessionMemory }: TranscriptPanelProps) {\n  const transcriptRef = useRef<HTMLDivElement>(null);\n\n  useEffect(() => {\n    // Auto-scroll to bottom when new messages arrive\n    if (transcriptRef.current) {\n      transcriptRef.current.scrollTop = transcriptRef.current.scrollHeight;\n    }\n  }, [messages]);\n\n  const getSpeakerInfo = (speakerId: string) => {\n    const speaker = speakers.find(s => s.id === speakerId);\n    return speaker || { name: 'Unknown', isAI: false, isGuest: false };\n  };\n\n  const getSpeakerInitials = (name: string) => {\n    return name\n      .split(' ')\n      .map(n => n[0])\n      .join('')\n      .toUpperCase()\n      .slice(0, 2);\n  };\n\n  const getSpeakerColor = (speaker: { isAI: boolean; isGuest: boolean }) => {\n    if (speaker.isAI) return 'bg-secondary';\n    if (speaker.isGuest) return 'bg-accent';\n    return 'bg-primary';\n  };\n\n  const formatTimestamp = (timestamp: Date) => {\n    return new Intl.DateTimeFormat('en-US', {\n      hour: '2-digit',\n      minute: '2-digit',\n      second: '2-digit',\n      hour12: false,\n    }).format(new Date(timestamp));\n  };\n\n  return (\n    <div className=\"col-span-6 space-y-6\">\n      {/* Live Transcript */}\n      <div className=\"bg-card rounded-lg border border-border h-96\">\n        <div className=\"p-6 border-b border-border flex items-center justify-between\">\n          <h3 className=\"text-lg font-semibold flex items-center gap-2\">\n            <i className=\"fas fa-comment-alt text-primary\"></i>\n            Live Transcript\n          </h3>\n          <div className=\"flex items-center gap-2\">\n            <div className=\"pulse-dot w-2 h-2 bg-destructive rounded-full\"></div>\n            <span className=\"text-sm text-muted-foreground\">Recording</span>\n          </div>\n        </div>\n        \n        <div \n          ref={transcriptRef}\n          className=\"p-6 h-80 overflow-y-auto\"\n          data-testid=\"transcript-container\"\n        >\n          {messages.length === 0 ? (\n            <div className=\"flex items-center justify-center h-full text-muted-foreground\">\n              <p>Waiting for conversation to begin...</p>\n            </div>\n          ) : (\n            messages.map((message, index) => {\n              const speaker = getSpeakerInfo(message.speakerId);\n              return (\n                <div \n                  key={message.id} \n                  className=\"transcript-line mb-4 last:mb-0\"\n                  data-testid={`message-${index}`}\n                >\n                  <div className=\"flex items-start gap-3\">\n                    <div className={`w-8 h-8 rounded-full flex items-center justify-center text-xs font-medium ${getSpeakerColor({ isAI: speaker.isAI || false, isGuest: speaker.isGuest || false })}`}>\n                      {speaker.isAI ? (\n                        <i className=\"fas fa-robot text-xs\"></i>\n                      ) : (\n                        <span>{getSpeakerInitials(speaker.name)}</span>\n                      )}\n                    </div>\n                    <div className=\"flex-1\">\n                      <div className=\"flex items-center gap-2 mb-1\">\n                        <span className={`text-sm font-medium ${speaker.isAI ? 'text-secondary' : ''}`}>\n                          {speaker.name}\n                        </span>\n                        <span className=\"text-xs text-muted-foreground\">\n                          {formatTimestamp(message.timestamp!)}\n                        </span>\n                        {speaker.isGuest && (\n                          <span className=\"px-2 py-0.5 bg-accent/20 text-accent text-xs rounded-full\">\n                            Guest\n                          </span>\n                        )}\n                        {message.isAIGenerated && (\n                          <span className=\"px-2 py-0.5 bg-secondary/20 text-secondary text-xs rounded-full\">\n                            AI\n                          </span>\n                        )}\n                      </div>\n                      <p className=\"text-sm\">{message.content}</p>\n                    </div>\n                  </div>\n                </div>\n              );\n            })\n          )}\n        </div>\n      </div>\n      \n      {/* Session Memory & Context */}\n      <div className=\"bg-card rounded-lg p-6 border border-border\">\n        <h3 className=\"text-lg font-semibold mb-4 flex items-center gap-2\">\n          <i className=\"fas fa-brain text-accent\"></i>\n          Session Memory\n        </h3>\n        \n        <div className=\"grid grid-cols-2 gap-4\">\n          <div>\n            <h4 className=\"text-sm font-medium text-muted-foreground mb-2\">Key Topics</h4>\n            <div className=\"space-y-2\" data-testid=\"key-topics\">\n              {sessionMemory?.topics?.length ? (\n                sessionMemory.topics.map((topic, index) => (\n                  <div key={index} className=\"flex items-center justify-between text-sm\">\n                    <span>{topic.name}</span>\n                    <span className=\"text-muted-foreground\">{topic.mentions}x</span>\n                  </div>\n                ))\n              ) : (\n                <div className=\"text-sm text-muted-foreground\">No topics identified yet</div>\n              )}\n            </div>\n          </div>\n          \n          <div>\n            <h4 className=\"text-sm font-medium text-muted-foreground mb-2\">Speaker Notes</h4>\n            <div className=\"space-y-2\" data-testid=\"speaker-notes\">\n              {sessionMemory?.speakerNotes && Object.keys(sessionMemory.speakerNotes).length ? (\n                Object.entries(sessionMemory.speakerNotes).map(([speakerId, note]) => {\n                  const speaker = getSpeakerInfo(speakerId);\n                  return (\n                    <div key={speakerId} className=\"text-sm\">\n                      <span className=\"font-medium\">{speaker.name}:</span>{' '}\n                      <span className=\"text-muted-foreground\">{note}</span>\n                    </div>\n                  );\n                })\n              ) : (\n                <div className=\"text-sm text-muted-foreground\">No speaker notes yet</div>\n              )}\n            </div>\n          </div>\n        </div>\n        \n        <div className=\"mt-4 pt-4 border-t border-border\">\n          <h4 className=\"text-sm font-medium text-muted-foreground mb-2\">Running Jokes & Callbacks</h4>\n          <div className=\"text-sm text-muted-foreground\" data-testid=\"running-jokes\">\n            {sessionMemory?.runningJokes?.length ? (\n              sessionMemory.runningJokes.map((joke, index) => (\n                <div key={index}>• {joke}</div>\n              ))\n            ) : (\n              <div>No running jokes yet</div>\n            )}\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":7129},"client/src/hooks/use-audio.tsx":{"content":"import { useState } from \"react\";\n\nexport function useAudio() {\n  const [isRecording, setIsRecording] = useState(false);\n  const [audioLevel, setAudioLevel] = useState(-60);\n  const [sendCommand, setSendCommand] = useState<((command: any) => void) | null>(null);\n\n  // This function now sends a command to start recording on the external desktop app\n  const startRecording = async (onSendCommand: (command: any) => void) => {\n    setSendCommand(() => onSendCommand);\n    onSendCommand({ type: 'audioControl', action: 'startRecording' });\n    setIsRecording(true);\n  };\n\n  // This function now sends a command to stop recording on the external desktop app\n  const stopRecording = () => {\n    if (sendCommand) {\n      sendCommand({ type: 'audioControl', action: 'stopRecording' });\n    }\n    setIsRecording(false);\n    setAudioLevel(-60);\n  };\n\n  // Keep the playAudio function for playing AI responses\n  const playAudio = async (audioBase64: string) => {\n    try {\n      const audioData = atob(audioBase64);\n      const arrayBuffer = new ArrayBuffer(audioData.length);\n      const view = new Uint8Array(arrayBuffer);\n      \n      for (let i = 0; i < audioData.length; i++) {\n        view[i] = audioData.charCodeAt(i);\n      }\n\n      const audioContext = new AudioContext();\n      const audioBuffer = await audioContext.decodeAudioData(arrayBuffer);\n      const source = audioContext.createBufferSource();\n      source.buffer = audioBuffer;\n      source.connect(audioContext.destination);\n      source.start();\n    } catch (error) {\n      console.error('Error playing audio:', error);\n    }\n  };\n\n  // Function to update audio level from external source\n  const updateAudioLevel = (level: number) => {\n    setAudioLevel(level);\n  };\n\n  // Function to send audio control commands\n  const sendAudioCommand = (command: string, data?: any) => {\n    if (sendCommand) {\n      sendCommand({ type: 'audioControl', action: command, data });\n    }\n  };\n\n  // Function to update recording state from external source\n  const updateRecordingState = (recording: boolean) => {\n    setIsRecording(recording);\n  };\n\n  return {\n    isRecording,\n    audioLevel,\n    startRecording,\n    stopRecording,\n    playAudio,\n    updateAudioLevel,\n    sendAudioCommand,\n    updateRecordingState,\n  };\n}","size_bytes":2271},"client/src/hooks/use-hotkeys.tsx":{"content":"import { useEffect } from \"react\";\n\ninterface HotkeyConfig {\n  key: string;\n  command: string;\n  description: string;\n}\n\nconst defaultHotkeys: HotkeyConfig[] = [\n  { key: 'r', command: 'riff', description: 'Riff on that' },\n  { key: '1', command: 'oneLiner', description: 'One-liner only' },\n  { key: 'w', command: 'wrap', description: 'Wrap in 10' },\n  { key: 't', command: 'tone', description: 'Switch tone' },\n  { key: 'p', command: 'pause', description: 'Pause AI' },\n  { key: 's', command: 'skip', description: 'Skip turn' },\n];\n\nexport function useHotkeys(onHotkey: (key: string, command: string) => void) {\n  useEffect(() => {\n    const handleKeydown = (event: KeyboardEvent) => {\n      // Only trigger if not typing in an input field\n      if (event.target instanceof HTMLInputElement || \n          event.target instanceof HTMLTextAreaElement ||\n          event.target instanceof HTMLSelectElement) {\n        return;\n      }\n\n      // Ignore if modifier keys are pressed\n      if (event.ctrlKey || event.altKey || event.metaKey) {\n        return;\n      }\n\n      const key = event.key.toLowerCase();\n      const hotkey = defaultHotkeys.find(h => h.key === key);\n      \n      if (hotkey) {\n        event.preventDefault();\n        onHotkey(key, hotkey.command);\n      }\n    };\n\n    document.addEventListener('keydown', handleKeydown);\n\n    return () => {\n      document.removeEventListener('keydown', handleKeydown);\n    };\n  }, [onHotkey]);\n\n  return defaultHotkeys;\n}\n","size_bytes":1475},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/hooks/use-websocket.tsx":{"content":"import { useEffect, useRef, useState, useCallback } from \"react\";\n\n// Protocol message types matching server implementation\ntype MessageType = \n  | 'desktop_connect' \n  | 'transcript' \n  | 'audio_levels' \n  | 'control_command' \n  | 'ai_response' \n  | 'status' \n  | 'error' \n  | 'connected'\n  | 'joinSession'\n  | 'audioData'\n  | 'requestAIResponse'\n  | 'hotkey'\n  | 'updatePersonality'\n  | 'newMessage'\n  | 'personalityUpdate'\n  | 'aiResponse'\n  | 'hotkeyTriggered'\n  | 'personalityUpdated';\n\ntype MessageSource = 'browser' | 'desktop' | 'server';\n\ninterface ProtocolMessage {\n  type: MessageType;\n  source: MessageSource;\n  data?: any;\n  timestamp: string;\n}\n\ninterface UseWebSocketOptions {\n  sessionId?: string;\n  clientType?: 'browser' | 'desktop';\n  onTranscript?: (data: any) => void;\n  onAiResponse?: (data: any) => void;\n  onAudioLevels?: (data: any) => void;\n  onStatus?: (data: any) => void;\n  onControlCommand?: (data: any) => void;\n  onMessage?: (message: ProtocolMessage) => void;\n}\n\nexport function useWebSocket(options: UseWebSocketOptions = {}) {\n  const { \n    sessionId, \n    clientType = 'browser',\n    onTranscript,\n    onAiResponse,\n    onAudioLevels,\n    onStatus,\n    onControlCommand,\n    onMessage\n  } = options;\n\n  const ws = useRef<WebSocket | null>(null);\n  const [isConnected, setIsConnected] = useState(false);\n  const [lastMessage, setLastMessage] = useState<ProtocolMessage | null>(null);\n  const [connectionStatus, setConnectionStatus] = useState<'disconnected' | 'connecting' | 'connected'>('disconnected');\n\n  // Message handlers\n  const handleMessage = useCallback((message: ProtocolMessage) => {\n    setLastMessage(message);\n    \n    // Call general message handler\n    onMessage?.(message);\n    \n    // Call specific handlers based on message type\n    switch (message.type) {\n      case 'transcript':\n        onTranscript?.(message.data);\n        break;\n      case 'ai_response':\n        onAiResponse?.(message.data);\n        break;\n      case 'audio_levels':\n        onAudioLevels?.(message.data);\n        break;\n      case 'status':\n        onStatus?.(message.data);\n        break;\n      case 'control_command':\n        onControlCommand?.(message.data);\n        break;\n      case 'connected':\n        console.log('Connected to WebSocket server with ID:', message.data?.clientId);\n        break;\n      case 'error':\n        console.error('WebSocket error:', message.data?.message);\n        break;\n    }\n  }, [onTranscript, onAiResponse, onAudioLevels, onStatus, onControlCommand, onMessage]);\n\n  // Send message with protocol format\n  const sendMessage = useCallback((\n    type: MessageType, \n    data?: any,\n    options: { source?: MessageSource } = {}\n  ) => {\n    if (ws.current?.readyState === WebSocket.OPEN) {\n      const message: ProtocolMessage = {\n        type,\n        source: options.source || clientType as MessageSource,\n        data,\n        timestamp: new Date().toISOString()\n      };\n      ws.current.send(JSON.stringify(message));\n    } else {\n      console.warn('WebSocket is not connected. Cannot send message:', type);\n    }\n  }, [clientType]);\n\n  // Legacy send function for backwards compatibility\n  const send = useCallback((message: any) => {\n    if (typeof message === 'object' && message.type) {\n      // If it's an object with a type, convert to new format\n      sendMessage(message.type, message.data || message);\n    } else {\n      // Otherwise send as-is (shouldn't normally happen)\n      if (ws.current?.readyState === WebSocket.OPEN) {\n        ws.current.send(JSON.stringify(message));\n      }\n    }\n  }, [sendMessage]);\n\n  // Specific send methods for common operations\n  const sendTranscript = useCallback((transcript: string, confidence?: number) => {\n    sendMessage('transcript', { text: transcript, confidence });\n  }, [sendMessage]);\n\n  const sendAiResponse = useCallback((response: string, metadata?: any) => {\n    sendMessage('ai_response', { response, ...metadata });\n  }, [sendMessage]);\n\n  const sendControlCommand = useCallback((command: string, params?: any) => {\n    sendMessage('control_command', { command, ...params });\n  }, [sendMessage]);\n\n  const sendAudioLevels = useCallback((levels: number[]) => {\n    sendMessage('audio_levels', { levels });\n  }, [sendMessage]);\n\n  const sendStatus = useCallback((status: string, details?: any) => {\n    sendMessage('status', { status, ...details });\n  }, [sendMessage]);\n\n  // WebSocket connection setup\n  useEffect(() => {\n    const protocol = window.location.protocol === \"https:\" ? \"wss:\" : \"ws:\";\n    const wsUrl = `${protocol}//${window.location.host}/ws`;\n    \n    setConnectionStatus('connecting');\n    ws.current = new WebSocket(wsUrl);\n\n    ws.current.onopen = () => {\n      setIsConnected(true);\n      setConnectionStatus('connected');\n      \n      // Send join session message\n      if (sessionId) {\n        const joinMessage = {\n          type: 'joinSession',\n          sessionId,\n          clientType,\n          isHost: clientType === 'browser'\n        };\n        send(joinMessage);\n      }\n\n      // If desktop client, send desktop_connect message\n      if (clientType === 'desktop' && sessionId) {\n        sendMessage('desktop_connect', { sessionId });\n      }\n    };\n\n    ws.current.onmessage = (event) => {\n      try {\n        const message = JSON.parse(event.data);\n        \n        // Handle both new protocol and legacy format\n        if (message.source && message.timestamp) {\n          // New protocol format\n          handleMessage(message as ProtocolMessage);\n        } else {\n          // Legacy format - convert to new format\n          const protocolMessage: ProtocolMessage = {\n            type: message.type || 'status',\n            source: 'server',\n            data: message.data || message,\n            timestamp: new Date().toISOString()\n          };\n          handleMessage(protocolMessage);\n        }\n      } catch (error) {\n        console.error('Failed to parse WebSocket message:', error);\n      }\n    };\n\n    ws.current.onclose = () => {\n      setIsConnected(false);\n      setConnectionStatus('disconnected');\n      console.log('WebSocket connection closed');\n    };\n\n    ws.current.onerror = (error) => {\n      console.error('WebSocket error:', error);\n      setConnectionStatus('disconnected');\n    };\n\n    return () => {\n      if (ws.current?.readyState === WebSocket.OPEN) {\n        ws.current.close();\n      }\n    };\n  }, [sessionId, clientType, handleMessage, send, sendMessage]);\n\n  // Reconnection logic\n  useEffect(() => {\n    let reconnectTimer: NodeJS.Timeout;\n    \n    if (!isConnected && connectionStatus === 'disconnected') {\n      // Attempt to reconnect after 3 seconds\n      reconnectTimer = setTimeout(() => {\n        console.log('Attempting to reconnect...');\n        // The effect will re-run due to dependency on isConnected\n      }, 3000);\n    }\n    \n    return () => {\n      if (reconnectTimer) {\n        clearTimeout(reconnectTimer);\n      }\n    };\n  }, [isConnected, connectionStatus]);\n\n  return {\n    isConnected,\n    connectionStatus,\n    lastMessage,\n    send, // Legacy method\n    sendMessage, // New protocol method\n    sendTranscript,\n    sendAiResponse,\n    sendControlCommand,\n    sendAudioLevels,\n    sendStatus\n  };\n}","size_bytes":7222},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1383},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/pages/dashboard.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { SessionHeader } from \"@/components/session-header\";\nimport { AudioControls } from \"@/components/audio-controls\";\nimport { TranscriptPanel } from \"@/components/transcript-panel\";\nimport { PersonalityControls } from \"@/components/personality-controls\";\nimport { AnalyticsPanel } from \"@/components/analytics-panel\";\nimport { useWebSocket } from \"@/hooks/use-websocket\";\nimport { useAudio } from \"@/hooks/use-audio\";\nimport { useHotkeys } from \"@/hooks/use-hotkeys\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport type { Session, Speaker, Message, AIPersonality, Analytics, SessionMemory } from \"@shared/schema\";\n\nconst DEMO_SESSION_ID = \"demo-session-1\";\n\nexport default function Dashboard() {\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  \n  const [currentSessionId, setCurrentSessionId] = useState<string>(DEMO_SESSION_ID);\n  const [aiStatus, setAIStatus] = useState<\"listening\" | \"processing\" | \"speaking\">(\"listening\");\n  const [audioLevel, setAudioLevel] = useState(-60);\n\n  // WebSocket connection with enhanced protocol support\n  const { \n    isConnected, \n    lastMessage, \n    send, \n    sendTranscript,\n    sendAiResponse,\n    sendControlCommand,\n    sendStatus \n  } = useWebSocket({\n    sessionId: currentSessionId,\n    clientType: 'browser',\n    onTranscript: (data) => {\n      // Handle incoming transcripts from desktop\n      if (data?.text) {\n        console.log('Transcript from desktop:', data.text);\n        queryClient.invalidateQueries({ queryKey: ['/api/sessions', currentSessionId, 'messages'] });\n      }\n    },\n    onAudioLevels: (data) => {\n      // Handle audio levels from desktop\n      if (data?.levels) {\n        updateAudioLevel(data.levels[0] || -60);\n      }\n    },\n    onStatus: (data) => {\n      // Handle status updates\n      if (data?.status === 'desktop_connected') {\n        toast({ \n          title: \"Desktop Connected\", \n          description: \"Audio processor connected successfully\" \n        });\n      } else if (data?.status === 'desktop_disconnected') {\n        toast({ \n          title: \"Desktop Disconnected\", \n          description: \"Audio processor disconnected\",\n          variant: \"destructive\"\n        });\n      }\n    }\n  });\n\n  // Audio control interface\n  const { \n    isRecording, \n    audioLevel: controlledAudioLevel, \n    startRecording, \n    stopRecording, \n    playAudio, \n    updateAudioLevel,\n    sendAudioCommand,\n    updateRecordingState \n  } = useAudio();\n\n  // Hotkey handling\n  const hotkeys = useHotkeys((key, command) => {\n    handleHotkey(key, command);\n  });\n\n  // Update audio level from controlled source\n  useEffect(() => {\n    setAudioLevel(controlledAudioLevel);\n  }, [controlledAudioLevel]);\n\n  // Handle WebSocket messages with new protocol\n  useEffect(() => {\n    if (lastMessage) {\n      const { type, source, data } = lastMessage;\n      \n      switch (type) {\n        case 'newMessage':\n          queryClient.invalidateQueries({ queryKey: ['/api/sessions', currentSessionId, 'messages'] });\n          break;\n          \n        case 'ai_response':\n          // AI response from browser or received back from desktop TTS\n          if (source === 'desktop' && data?.audio) {\n            setAIStatus(\"speaking\");\n            playAudio(data.audio);\n            setTimeout(() => setAIStatus(\"listening\"), 3000);\n          }\n          break;\n          \n        case 'aiResponse':\n          // Legacy format support\n          setAIStatus(\"speaking\");\n          if (data?.audio) {\n            playAudio(data.audio);\n          }\n          queryClient.invalidateQueries({ queryKey: ['/api/sessions', currentSessionId, 'messages'] });\n          setTimeout(() => setAIStatus(\"listening\"), 3000);\n          break;\n          \n        case 'transcript':\n          // Transcript from desktop - handled by onTranscript callback\n          if (source === 'desktop' && data?.text) {\n            // Transcript handling is done by the onTranscript callback\n            console.log('New transcript from desktop:', data.text);\n          }\n          break;\n          \n        case 'audio_levels':\n          // Handled by onAudioLevels callback\n          break;\n          \n        case 'control_command':\n          // Control commands from other sources\n          if (source === 'desktop' && data?.command) {\n            console.log('Control command from desktop:', data.command);\n          }\n          break;\n          \n        case 'status':\n          // Status updates handled by onStatus callback\n          break;\n          \n        case 'personalityUpdated':\n          queryClient.invalidateQueries({ queryKey: ['/api/sessions', currentSessionId, 'personality'] });\n          break;\n          \n        case 'hotkeyTriggered':\n          toast({ \n            title: \"Hotkey Activated\", \n            description: `Command: ${data?.command || 'unknown'}` \n          });\n          break;\n      }\n    }\n  }, [lastMessage, currentSessionId, queryClient, playAudio, toast]);\n\n  // Initialize connection to external desktop app\n  useEffect(() => {\n    if (isConnected) {\n      // Send status that browser control center is ready\n      sendStatus('control_center_ready', { sessionId: currentSessionId });\n      \n      // Pass the control command function to audio hook\n      if (!isRecording) {\n        startRecording((commandData) => {\n          // Handle different command formats\n          if (typeof commandData === 'object' && commandData.type === 'audioControl') {\n            // Audio control command from the hook\n            sendControlCommand(commandData.action, commandData.data);\n          } else {\n            // Direct command\n            sendControlCommand('audio', commandData);\n          }\n        });\n      }\n    }\n\n    return () => {\n      if (isRecording) {\n        stopRecording();\n      }\n    };\n  }, [isConnected, currentSessionId, sendStatus, sendControlCommand, isRecording, startRecording, stopRecording]);\n\n  // Queries\n  const { data: session } = useQuery<Session>({\n    queryKey: ['/api/sessions', currentSessionId],\n    enabled: !!currentSessionId,\n  });\n\n  const { data: speakers = [] } = useQuery<Speaker[]>({\n    queryKey: ['/api/sessions', currentSessionId, 'speakers'],\n    enabled: !!currentSessionId,\n  });\n\n  const { data: messages = [] } = useQuery<Message[]>({\n    queryKey: ['/api/sessions', currentSessionId, 'messages'],\n    enabled: !!currentSessionId,\n  });\n\n  const { data: personality } = useQuery<AIPersonality>({\n    queryKey: ['/api/sessions', currentSessionId, 'personality'],\n    enabled: !!currentSessionId,\n  });\n\n  const { data: analytics } = useQuery<Analytics>({\n    queryKey: ['/api/sessions', currentSessionId, 'analytics'],\n    enabled: !!currentSessionId,\n  });\n\n  const { data: sessionMemory } = useQuery<SessionMemory>({\n    queryKey: ['/api/sessions', currentSessionId, 'memory'],\n    enabled: !!currentSessionId,\n  });\n\n  // Mutations\n  const updatePersonalityMutation = useMutation({\n    mutationFn: async (updates: Partial<AIPersonality>) => {\n      return await apiRequest('PUT', `/api/sessions/${currentSessionId}/personality`, updates);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/sessions', currentSessionId, 'personality'] });\n    },\n  });\n\n  // Event handlers\n  const handlePersonalityChange = (updates: Partial<AIPersonality>) => {\n    if (personality) {\n      const newPersonality = { ...personality, ...updates };\n      updatePersonalityMutation.mutate(updates);\n      \n      // Send update via WebSocket for real-time changes\n      send({ type: 'updatePersonality', personality: newPersonality });\n    }\n  };\n\n  const handlePauseAI = () => {\n    setAIStatus(\"listening\");\n    sendControlCommand('pause', { key: 'p' });\n  };\n\n  const handleSkipTurn = () => {\n    sendControlCommand('skip', { key: 's' });\n  };\n\n  const handleHotkey = (key: string, command: string) => {\n    setAIStatus(\"processing\");\n    \n    // Send control command to desktop\n    sendControlCommand('hotkey', { key, command });\n    \n    // For AI response commands, also send AI response request\n    if (['riff', 'oneLiner', 'wrap'].includes(command)) {\n      const recentTranscript = messages\n        .slice(-3)\n        .map(m => m.content)\n        .join(' ');\n      \n      // Generate AI response and send to desktop for TTS\n      send({ \n        type: 'requestAIResponse', \n        transcript: recentTranscript,\n        command \n      });\n    }\n  };\n\n  const handleGenerateIntro = async () => {\n    setAIStatus(\"processing\");\n    \n    // Request AI to generate intro\n    send({ \n      type: 'requestAIResponse', \n      transcript: \"Generate a compelling cold open for this Twitter Space\",\n      command: 'generateIntro'\n    });\n    \n    // The AI response will be automatically forwarded to desktop for TTS\n  };\n\n  const handleCreateSegue = async () => {\n    setAIStatus(\"processing\");\n    \n    // Request AI to create segue\n    send({ \n      type: 'requestAIResponse', \n      transcript: \"Create a smooth transition to the next segment\",\n      command: 'createSegue'\n    });\n    \n    // The AI response will be automatically forwarded to desktop for TTS\n  };\n\n  const handleSummarizeSession = async () => {\n    try {\n      // This would generate a session summary\n      toast({ title: \"Session Summary\", description: \"Summary generation started\" });\n    } catch (error) {\n      toast({ title: \"Error\", description: \"Failed to generate summary\", variant: \"destructive\" });\n    }\n  };\n\n  const handleExportTranscript = async () => {\n    try {\n      // This would export the transcript\n      const transcriptData = messages.map(m => {\n        const speaker = speakers.find(s => s.id === m.speakerId);\n        return `[${m.timestamp}] ${speaker?.name || 'Unknown'}: ${m.content}`;\n      }).join('\\n');\n      \n      const blob = new Blob([transcriptData], { type: 'text/plain' });\n      const url = URL.createObjectURL(blob);\n      const a = document.createElement('a');\n      a.href = url;\n      a.download = `transcript-${currentSessionId}.txt`;\n      a.click();\n      URL.revokeObjectURL(url);\n      \n      toast({ title: \"Export Complete\", description: \"Transcript downloaded successfully\" });\n    } catch (error) {\n      toast({ title: \"Export Failed\", description: \"Could not export transcript\", variant: \"destructive\" });\n    }\n  };\n\n  if (!session) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center bg-background text-foreground\">\n        <div className=\"text-center\">\n          <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-primary mx-auto mb-4\"></div>\n          <p className=\"text-muted-foreground\">Loading AI Cohost Control Center...</p>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen flex flex-col bg-background text-foreground\">\n      <SessionHeader\n        sessionId={currentSessionId}\n        status={session.status}\n        duration={session.duration || 0}\n        listeners={session.listeners || 0}\n      />\n      \n      <main className=\"flex-1 p-6 grid grid-cols-12 gap-6\">\n        <AudioControls\n          audioLevel={audioLevel}\n          aiStatus={aiStatus}\n          aiResponseTime={analytics?.avgResponseTime || 1.2}\n          aiConfidence={0.94} // This would come from the latest AI response\n          onPauseAI={handlePauseAI}\n          onSkipTurn={handleSkipTurn}\n        />\n        \n        <TranscriptPanel\n          messages={messages}\n          speakers={speakers}\n          sessionMemory={sessionMemory ? {\n            topics: sessionMemory.topics as Array<{ name: string; mentions: number }> || [],\n            speakerNotes: sessionMemory.speakerNotes as Record<string, string> || {},\n            runningJokes: sessionMemory.runningJokes || []\n          } : undefined}\n        />\n        \n        <div className=\"col-span-3 space-y-6\">\n          {personality && (\n            <PersonalityControls\n              personality={{\n                voiceType: personality.voiceType,\n                comedyLevel: personality.comedyLevel || 60,\n                researchLevel: personality.researchLevel || 40,\n                energyLevel: personality.energyLevel || 75,\n                responseStyle: personality.responseStyle || 'conversational',\n              }}\n              onPersonalityChange={handlePersonalityChange}\n            />\n          )}\n          \n          <AnalyticsPanel\n            analytics={{\n              aiSpeakingTime: analytics?.aiSpeakingTime || 0,\n              totalResponses: analytics?.totalResponses || 0,\n              avgResponseTime: analytics?.avgResponseTime || 0,\n              interrupts: analytics?.interrupts || 0,\n              jokeSuccessRate: analytics?.jokeSuccessRate || 0,\n            }}\n            clipMoments={sessionMemory?.clipMoments as Array<{ topic: string; timestamp: string }> || []}\n            onGenerateIntro={handleGenerateIntro}\n            onCreateSegue={handleCreateSegue}\n            onSummarizeSession={handleSummarizeSession}\n            onExportTranscript={handleExportTranscript}\n          />\n        </div>\n      </main>\n    </div>\n  );\n}\n","size_bytes":13271},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1419},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1128},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":1901},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1858},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":791},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5742},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContextProps>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <SheetHeader className=\"sr-only\">\n              <SheetTitle>Sidebar</SheetTitle>\n              <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n            </SheetHeader>\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden text-sidebar-foreground md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"relative w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex w-full flex-1 flex-col bg-background\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[--skeleton-width] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":23567},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209},"AUDIO_ANALYSIS.md":{"content":"# Audio Capture Implementation Analysis\n\n## Executive Summary\n\nThe application currently uses browser-based audio capture through the Web Audio API and MediaRecorder API. Audio is captured from the user's microphone, processed in chunks, and transmitted to the server via WebSocket for transcription and AI response generation. To support external audio input (e.g., from Twitter/X Spaces), several components need modification.\n\n## Current Implementation Overview\n\n### Data Flow Architecture\n\n```\n1. Audio Input (Browser)\n   ↓\n2. MediaRecorder API Capture\n   ↓\n3. Web Audio API Processing\n   ↓\n4. Base64 Encoding\n   ↓\n5. WebSocket Transmission\n   ↓\n6. Server Buffer Management\n   ↓\n7. OpenAI Whisper Transcription\n   ↓\n8. GPT-4 Response Generation\n   ↓\n9. Text-to-Speech Synthesis\n   ↓\n10. WebSocket Response\n   ↓\n11. UI Update & Audio Playback\n```\n\n## Component Analysis\n\n### 1. Browser-Side Audio Capture\n\n**Location**: `client/src/hooks/use-audio.tsx`\n\n**Current Implementation**:\n- Uses `navigator.mediaDevices.getUserMedia()` for microphone access\n- MediaRecorder captures audio in `audio/webm` format\n- Web Audio API creates AnalyserNode for level monitoring\n- Audio chunks captured every 1 second\n- Audio levels calculated in real-time (-60dB to 0dB range)\n\n**Key Functions**:\n- `startRecording()`: Initializes MediaStream and MediaRecorder\n- `stopRecording()`: Cleans up audio resources\n- `playAudio()`: Plays base64-encoded audio responses\n\n**Audio Configuration**:\n```javascript\naudio: {\n  echoCancellation: true,\n  noiseSuppression: true,\n  autoGainControl: true,\n  sampleRate: 44100,\n}\n```\n\n### 2. WebSocket Communication\n\n**Client**: `client/src/hooks/use-websocket.tsx`\n**Server**: `server/routes.ts`\n\n**Message Types**:\n- `audioData`: Base64-encoded audio chunks\n- `transcription`: Live transcription results\n- `aiResponse`: AI-generated response with audio\n- `audioLevel`: Real-time audio level updates\n- `newMessage`: Transcript message updates\n\n**Data Format**:\n```javascript\n{\n  type: 'audioData',\n  data: base64EncodedString\n}\n```\n\n### 3. Dashboard Integration\n\n**Location**: `client/src/pages/dashboard.tsx`\n\n**Key Integration Points**:\n- Audio hook initialization on WebSocket connection\n- Base64 encoding of ArrayBuffer before transmission\n- Message handling for AI responses and transcriptions\n- Audio level updates for UI visualization\n- Hotkey command processing\n\n### 4. Server-Side Audio Processing\n\n**Location**: `server/services/audio.ts`\n\n**AudioProcessor Class Features**:\n- Buffer management with 4096-byte chunk size\n- Audio level calculation (RMS to dB conversion)\n- Voice Activity Detection (VAD)\n- Mix-minus output support (stub implementation)\n- Noise reduction placeholder\n- Echo cancellation placeholder\n\n**Events Emitted**:\n- `audioLevel`: Real-time level updates\n- `audioReady`: Buffered audio ready for transcription\n- `processingStarted/Stopped`: Processing state changes\n\n### 5. OpenAI Integration\n\n**Location**: `server/services/openai.ts`\n\n**Services**:\n- `transcribeAudio()`: Whisper API for speech-to-text\n- `generateAIResponse()`: GPT-4 for contextual responses\n- `synthesizeSpeech()`: Text-to-speech generation\n- `analyzeConversationTopic()`: Topic extraction and sentiment\n\n**Audio Processing Pipeline**:\n1. Buffer to File conversion for Whisper API\n2. JSON response format with confidence scores\n3. TTS synthesis in WAV format\n4. Buffer conversion for transmission\n\n### 6. Server Routes & WebSocket Handler\n\n**Location**: `server/routes.ts`\n\n**WebSocket Message Handlers**:\n```javascript\ncase 'audioData':\n  const audioBuffer = Buffer.from(message.data, 'base64');\n  audioProcessor.processAudioChunk(audioBuffer);\n  break;\n```\n\n**Audio Processing Flow**:\n1. Receive base64-encoded audio\n2. Decode to Buffer\n3. Process through AudioProcessor\n4. Trigger transcription on buffer ready\n5. Generate AI response\n6. Synthesize speech\n7. Broadcast results to session\n\n## Components Requiring Modification for External Audio\n\n### 1. Audio Input Source (`client/src/hooks/use-audio.tsx`)\n\n**Current**: Direct microphone capture via getUserMedia\n**Modification Needed**:\n- Add support for alternative MediaStream sources\n- Implement audio source selection (microphone vs. external)\n- Support for pre-configured MediaStream injection\n- Handle virtual audio cable input\n\n### 2. Audio Format & Encoding\n\n**Current**: WebM format from MediaRecorder\n**Modification Needed**:\n- Support multiple audio formats (PCM, MP3, AAC)\n- Handle different sample rates and bit depths\n- Implement format conversion if needed\n\n### 3. Permissions & Access Control\n\n**Current**: Browser microphone permission request\n**Modification Needed**:\n- Conditional permission requests based on audio source\n- Support for external audio without browser permissions\n- Handle system-level audio routing permissions\n\n### 4. WebSocket Protocol (`client/src/hooks/use-websocket.tsx`)\n\n**Current**: Simple base64 audio chunks\n**Modification Needed**:\n- Add metadata for audio source identification\n- Support for different encoding types\n- Handle larger buffer sizes for external audio\n\n### 5. Server Audio Processing (`server/services/audio.ts`)\n\n**Current**: Assumes consistent format from browser\n**Modification Needed**:\n- Dynamic format detection\n- Multiple decoder support\n- Adaptive buffering based on source type\n- Enhanced VAD for different audio qualities\n\n### 6. Audio Routing & Mixing\n\n**Current**: Placeholder implementations\n**Modification Needed**:\n- Implement proper mix-minus for feedback prevention\n- Support for multiple audio channels\n- Audio routing matrix for complex setups\n- Real-time audio mixing capabilities\n\n### 7. UI Components\n\n**Audio Controls** (`client/src/components/audio-controls.tsx`):\n- Add audio source selector\n- Display external audio status\n- Show multiple audio level meters\n\n**Dashboard** (`client/src/pages/dashboard.tsx`):\n- Handle multiple audio streams\n- Support for audio source switching\n- Display external audio metadata\n\n## Recommended Implementation Approach\n\n### Phase 1: Audio Source Abstraction\n1. Create AudioSource interface to abstract input methods\n2. Implement MicrophoneSource and ExternalSource classes\n3. Add source selection to useAudio hook\n\n### Phase 2: Format Support\n1. Add audio format detection\n2. Implement conversion utilities\n3. Update server processors for multiple formats\n\n### Phase 3: Virtual Audio Cable Integration\n1. Implement system audio capture\n2. Add loopback audio support\n3. Handle virtual cable configuration\n\n### Phase 4: Enhanced Processing\n1. Implement proper mix-minus\n2. Add multi-channel support\n3. Enhance echo cancellation for external sources\n\n### Phase 5: UI Updates\n1. Add source selection UI\n2. Update audio level displays\n3. Add external audio status indicators\n\n## Critical Considerations\n\n### Latency\n- Current: ~1 second chunks may be too large for real-time\n- Consider: Smaller chunks (100-200ms) for external audio\n- Implement adaptive chunking based on latency requirements\n\n### Audio Quality\n- Current: 44.1kHz sample rate optimized for voice\n- Consider: Dynamic sample rate based on source\n- Support for higher quality external audio\n\n### Synchronization\n- Current: Simple sequential processing\n- Consider: Timestamp-based synchronization\n- Handle out-of-order packets\n\n### Security\n- Current: Browser sandboxed audio\n- Consider: External audio validation\n- Implement audio fingerprinting for source verification\n\n## Dependencies on External Systems\n\n1. **Virtual Audio Cables**: Mentioned in `replit.md` line 68\n2. **Loopback Audio**: System-level audio routing\n3. **Browser APIs**: MediaStream, AudioContext limitations\n4. **WebSocket**: Bandwidth and latency constraints\n5. **OpenAI APIs**: Format requirements and rate limits\n\n## Testing Considerations\n\n1. **Unit Tests Needed**:\n   - Audio format conversion\n   - Buffer management with various chunk sizes\n   - WebSocket message handling with different sources\n\n2. **Integration Tests Needed**:\n   - End-to-end audio flow with external sources\n   - Latency measurements\n   - Audio quality validation\n\n3. **Performance Tests Needed**:\n   - Multiple audio stream handling\n   - Large buffer processing\n   - Real-time constraints validation\n\n## Next Steps\n\n1. Implement AudioSource abstraction layer\n2. Add external audio capture capabilities\n3. Update WebSocket protocol for source metadata\n4. Enhance server-side audio processing\n5. Create UI for source selection\n6. Test with virtual audio cables\n7. Optimize for latency and quality","size_bytes":8518}},"version":1}